{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a food pantry finder application built for the Second Harvest Food Bank of the Lehigh Valley. The system provides a public-facing map and directory for finding local food pantries, along with an administrative interface for managing pantry data. The application features a React frontend with an interactive map interface, Express.js backend API, and PostgreSQL database with Drizzle ORM for data management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development\n- **UI Library**: Shadcn/ui components with Radix UI primitives and Tailwind CSS for styling\n- **Routing**: Wouter for client-side routing with conditional rendering based on authentication\n- **State Management**: TanStack Query for server state and API caching\n- **Mapping**: React Leaflet for interactive map functionality with OpenStreetMap tiles\n- **Authentication Flow**: Conditional routing that shows landing page for unauthenticated users and main app for authenticated users\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Authentication**: Replit's OpenID Connect (OIDC) authentication system with Passport.js\n- **Session Management**: Express sessions stored in PostgreSQL using connect-pg-simple\n- **API Design**: RESTful endpoints with structured error handling and request logging middleware\n\n## Database Schema\n- **Users Table**: Stores user authentication data (required for Replit Auth)\n- **Sessions Table**: Handles session persistence for authentication\n- **Pantries Table**: Core entity storing food pantry information including location, contact details, and operational data\n- **Admin Settings**: Global application configuration\n- **Data Sync Settings**: Configuration for external data synchronization\n\n## Data Layer Design\n- **Storage Interface**: Abstract IStorage interface defining all database operations\n- **Database Implementation**: Concrete DatabaseStorage class implementing the interface with Drizzle ORM\n- **Type Safety**: Full TypeScript integration with Drizzle schema definitions and Zod validation\n\n# External Dependencies\n\n## Database and Hosting\n- **Neon Database**: Serverless PostgreSQL database with WebSocket support for connection pooling\n- **Replit Infrastructure**: Hosting platform with integrated authentication and development environment\n\n## Authentication\n- **Replit Auth**: OpenID Connect provider for user authentication\n- **Passport.js**: Authentication middleware for Express.js integration\n\n## Mapping and Geocoding\n- **Leaflet**: Open-source mapping library for interactive maps\n- **OpenStreetMap**: Tile service for map rendering\n- **Nominatim API**: OpenStreetMap's geocoding service for address search and location lookup\n\n## UI and Styling\n- **Radix UI**: Headless component primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **Vite**: Build tool and development server with hot module replacement\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TypeScript**: Static type checking for enhanced development experience","size_bytes":3377},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n\nexport const isAdmin: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  try {\n    const userId = user.claims.sub;\n    const dbUser = await storage.getUser(userId);\n    \n    if (!dbUser) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n\n    if (dbUser.status !== 'approved') {\n      return res.status(403).json({ message: \"Account pending approval\" });\n    }\n\n    if (dbUser.role !== 'admin' && dbUser.role !== 'super_admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    return next();\n  } catch (error) {\n    return res.status(500).json({ message: \"Error checking admin permissions\" });\n  }\n};\n\nexport const isSuperAdmin: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  try {\n    const userId = user.claims.sub;\n    const dbUser = await storage.getUser(userId);\n    \n    if (!dbUser) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n\n    if (dbUser.status !== 'approved') {\n      return res.status(403).json({ message: \"Account pending approval\" });\n    }\n\n    if (dbUser.role !== 'super_admin') {\n      return res.status(403).json({ message: \"Super admin access required\" });\n    }\n\n    return next();\n  } catch (error) {\n    return res.status(500).json({ message: \"Error checking super admin permissions\" });\n  }\n};\n","size_bytes":5831},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, isAdmin, isSuperAdmin } from \"./replitAuth\";\nimport { insertPantrySchema, insertAdminSettingsSchema, insertDataSyncSettingsSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport csv from \"csv-parser\";\nimport { Readable } from \"stream\";\nimport { SharePointService } from \"./services/sharepointService\";\nimport { ExportService } from \"./services/exportService\";\n\n// Function to clean HTML tags and WordPress block comments from text\nfunction cleanHtmlAndWordPress(text: string): string {\n  if (!text || typeof text !== 'string') return text;\n  \n  return text\n    // Remove WordPress block comments (<!-- wp:... --> and <!-- /wp:... -->)\n    .replace(/<!--\\s*\\/?wp:[^>]*-->/g, '')\n    // Remove HTML tags while preserving content\n    .replace(/<[^>]*>/g, '')\n    // Replace common HTML entities\n    .replace(/&nbsp;/g, ' ')\n    .replace(/&amp;/g, '&')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&quot;/g, '\"')\n    .replace(/&#39;/g, \"'\")\n    // Clean up extra whitespace\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n  \n  // Initialize first super admin if needed\n  await storage.ensureFirstSuperAdmin();\n  \n  // Configure multer for file uploads\n  const upload = multer({ \n    storage: multer.memoryStorage(),\n    limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit\n    fileFilter: (req, file, cb) => {\n      if (file.mimetype === 'text/csv' || file.originalname.endsWith('.csv')) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only CSV files are allowed'));\n      }\n    }\n  });\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User management routes (Admin only)\n  app.get('/api/admin/users', isSuperAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.put('/api/admin/users/:id/role', isSuperAdmin, async (req: any, res) => {\n    try {\n      const { role } = req.body;\n      const adminId = req.user.claims.sub;\n      \n      if (!['user', 'admin', 'super_admin'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n\n      const user = await storage.updateUserRole(req.params.id, role, adminId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  app.put('/api/admin/users/:id/status', isSuperAdmin, async (req: any, res) => {\n    try {\n      const { status } = req.body;\n      const adminId = req.user.claims.sub;\n      \n      if (!['pending', 'approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      const user = await storage.updateUserStatus(req.params.id, status, adminId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user status:\", error);\n      res.status(500).json({ message: \"Failed to update user status\" });\n    }\n  });\n\n  // Request admin access endpoint (for users to request admin privileges)\n  app.post('/api/auth/request-admin', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.updateUserRole(userId, 'admin');\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error requesting admin access:\", error);\n      res.status(500).json({ message: \"Failed to request admin access\" });\n    }\n  });\n\n  // Public pantry routes\n  app.get('/api/pantries', async (req, res) => {\n    try {\n      const pantries = await storage.getPantries();\n      res.json(pantries);\n    } catch (error) {\n      console.error(\"Error fetching pantries:\", error);\n      res.status(500).json({ message: \"Failed to fetch pantries\" });\n    }\n  });\n\n  app.get('/api/pantries/search', async (req, res) => {\n    try {\n      const { q, lat, lng, radius } = req.query;\n      const query = q as string || '';\n      const latitude = lat ? parseFloat(lat as string) : undefined;\n      const longitude = lng ? parseFloat(lng as string) : undefined;\n      const searchRadius = radius ? parseFloat(radius as string) : undefined;\n\n      const pantries = await storage.searchPantries(query, latitude, longitude, searchRadius);\n      res.json(pantries);\n    } catch (error) {\n      console.error(\"Error searching pantries:\", error);\n      res.status(500).json({ message: \"Failed to search pantries\" });\n    }\n  });\n\n  // Geocoding endpoint to convert addresses to coordinates\n  app.get('/api/geocode', async (req, res) => {\n    try {\n      const { q } = req.query;\n      const query = q as string;\n      \n      if (!query) {\n        return res.status(400).json({ message: \"Query parameter is required\" });\n      }\n\n      // Call OpenStreetMap Nominatim API with proper headers\n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=1&countrycodes=us&addressdetails=1`,\n        {\n          headers: {\n            'User-Agent': 'PantryFinder/1.0 (Contact: admin@pantryfinder.com)',\n            'Accept': 'application/json'\n          }\n        }\n      );\n      \n      if (!response.ok) {\n        console.error(`Geocoding API returned ${response.status}: ${response.statusText}`);\n        return res.json([]); // Return empty array instead of error\n      }\n      \n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        console.error('Geocoding API returned non-JSON response');\n        return res.json([]); // Return empty array for non-JSON responses\n      }\n      \n      const results = await response.json();\n      res.json(results || []);\n    } catch (error) {\n      console.error(\"Geocoding error:\", error);\n      // Return empty array instead of error to allow fallback to text search\n      res.json([]);\n    }\n  });\n\n  app.get('/api/pantries/:id', async (req, res) => {\n    try {\n      const pantry = await storage.getPantry(req.params.id);\n      if (!pantry) {\n        return res.status(404).json({ message: \"Pantry not found\" });\n      }\n      res.json(pantry);\n    } catch (error) {\n      console.error(\"Error fetching pantry:\", error);\n      res.status(500).json({ message: \"Failed to fetch pantry\" });\n    }\n  });\n\n  // Admin-only pantry routes\n  app.post('/api/pantries', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertPantrySchema.parse(req.body);\n      const pantry = await storage.createPantry(validatedData);\n      res.status(201).json(pantry);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid pantry data\", errors: error.errors });\n      }\n      console.error(\"Error creating pantry:\", error);\n      res.status(500).json({ message: \"Failed to create pantry\" });\n    }\n  });\n\n  app.put('/api/pantries/:id', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertPantrySchema.partial().parse(req.body);\n      const pantry = await storage.updatePantry(req.params.id, validatedData);\n      res.json(pantry);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid pantry data\", errors: error.errors });\n      }\n      console.error(\"Error updating pantry:\", error);\n      res.status(500).json({ message: \"Failed to update pantry\" });\n    }\n  });\n\n  app.delete('/api/pantries/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deletePantry(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting pantry:\", error);\n      res.status(500).json({ message: \"Failed to delete pantry\" });\n    }\n  });\n\n  // Admin settings routes\n  app.get('/api/admin/settings', async (req, res) => {\n    try {\n      const settings = await storage.getAdminSettings();\n      if (!settings) {\n        // Return default settings if none exist\n        const defaultSettings = {\n          organizationName: \"Second Harvest Food Bank of the Lehigh Valley\",\n          primaryColor: \"#0F766E\",\n          secondaryColor: \"#EA580C\",\n          faviconUrl: undefined,\n          defaultLatitude: \"40.6259\",\n          defaultLongitude: \"-75.3697\",\n          defaultZoom: \"12\",\n          mapStyle: \"standard\",\n        };\n        return res.json(defaultSettings);\n      }\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching admin settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin settings\" });\n    }\n  });\n\n  app.put('/api/admin/settings', isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertAdminSettingsSchema.parse(req.body);\n      const settings = await storage.updateAdminSettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid settings data\", errors: error.errors });\n      }\n      console.error(\"Error updating admin settings:\", error);\n      res.status(500).json({ message: \"Failed to update admin settings\" });\n    }\n  });\n\n  // Data sync settings routes\n  app.get('/api/admin/data-sync', isAdmin, async (req, res) => {\n    try {\n      const settings = await storage.getDataSyncSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching data sync settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch data sync settings\" });\n    }\n  });\n\n  app.post('/api/admin/data-sync', isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertDataSyncSettingsSchema.parse(req.body);\n      const settings = await storage.createDataSyncSettings(validatedData);\n      res.status(201).json(settings);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data sync settings\", errors: error.errors });\n      }\n      console.error(\"Error creating data sync settings:\", error);\n      res.status(500).json({ message: \"Failed to create data sync settings\" });\n    }\n  });\n\n  // Individual pantry CRUD endpoints\n  app.put('/api/pantries/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertPantrySchema.parse(req.body);\n      const updatedPantry = await storage.updatePantry(id, validatedData);\n      \n      res.json(updatedPantry);\n    } catch (error) {\n      console.error(\"Error updating pantry:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update pantry\" });\n    }\n  });\n\n  app.delete('/api/pantries/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deletePantry(id);\n      \n      res.json({ message: \"Pantry deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting pantry:\", error);\n      res.status(500).json({ message: \"Failed to delete pantry\" });\n    }\n  });\n\n  // Bulk operations\n  app.delete('/api/pantries', isAuthenticated, async (req, res) => {\n    try {\n      const count = await storage.deleteAllPantries();\n      res.json({ message: `Successfully deleted ${count} pantries`, count });\n    } catch (error) {\n      console.error(\"Error deleting all pantries:\", error);\n      res.status(500).json({ message: \"Failed to delete pantries\" });\n    }\n  });\n\n  // CSV upload endpoint\n  app.post('/api/admin/upload-csv', isAuthenticated, upload.single('csvFile'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No CSV file provided\" });\n      }\n\n      const results: any[] = [];\n      const stream = Readable.from(req.file.buffer.toString());\n      \n      // Parse CSV data with proper quote handling for multi-line fields\n      await new Promise((resolve, reject) => {\n        stream\n          .pipe(csv({\n            escape: '\"',\n            quote: '\"'\n          }))\n          .on('data', (data) => {\n            // Only add rows that have meaningful data\n            if (data.name && data.name.trim() && !data.name.includes('wpsl_id')) {\n              results.push(data);\n            }\n          })\n          .on('end', resolve)\n          .on('error', reject);\n      });\n\n      if (results.length === 0) {\n        return res.status(400).json({ message: \"CSV file is empty or invalid\" });\n      }\n\n      // Map CSV columns to pantry fields\n      const pantries = results.map((row) => {\n        // Support the specific WPSL export format and common variations\n        const getName = () => {\n          const name = row.name || row.Name || row.pantry_name || row['Pantry Name'] || '';\n          return name ? cleanHtmlAndWordPress(name) : '';\n        };\n        const getAddress = () => {\n          const address = row.address || row.Address || row.street_address || row['Street Address'] || '';\n          return address ? cleanHtmlAndWordPress(address) : '';\n        };\n        const getCity = () => {\n          const city = row.city || row.City || '';\n          return city ? cleanHtmlAndWordPress(city) : '';\n        };\n        const getState = () => {\n          const state = row.state || row.State || row.st || row.ST || '';\n          return state ? cleanHtmlAndWordPress(state) : '';\n        };\n        const getZip = () => row.zip || row.zipcode || row.zip_code || row['Zip Code'] || row.postal_code || '';\n        const getPhone = () => row.phone || row.Phone || row.telephone || row['Phone Number'] || null;\n        const getEmail = () => row.email || row.Email || row['Email Address'] || null;\n        const getHours = () => {\n          const hours = row.hours || row.Hours || row.operating_hours || row['Operating Hours'] || null;\n          return hours ? cleanHtmlAndWordPress(hours) : null;\n        };\n        const getAccessType = () => {\n          const access = row.access_type || row['Access Type'] || row.access || '';\n          if (access && access.toLowerCase().includes('walk')) return 'walk-in';\n          if (access && access.toLowerCase().includes('appointment')) return 'appointment';\n          if (access && access.toLowerCase().includes('mobile')) return 'mobile';\n          return null;\n        };\n        const getDescription = () => {\n          const desc = row.description || row.Description || row.notes || row.Notes || null;\n          return desc ? cleanHtmlAndWordPress(desc) : null;\n        };\n\n        // Skip rows that don't have essential data or are header-like\n        const name = getName();\n        const address = getAddress();\n        const city = getCity();\n        const state = getState();\n        \n        // Check if this is likely a header row, empty row, or invalid data\n        if (!name || \n            name.toLowerCase().includes('wpsl_id') || \n            name.toLowerCase().includes('food pantry') ||\n            name.trim().length < 3 ||\n            /^[0-9]+$/.test(name.trim())) { // Skip rows that are just numbers\n          return null;\n        }\n\n        return {\n          name: name,\n          address: address,\n          city: city,\n          state: state,\n          zipCode: getZip(),\n          phone: getPhone(),\n          email: getEmail(),\n          hours: getHours(),\n          accessType: getAccessType(),\n          description: getDescription(),\n          latitude: row.lat || row.latitude || null,\n          longitude: row.lng || row.longitude || row.lon || null,\n          services: row.services ? [row.services] : []\n        };\n      }).filter(pantry => pantry !== null); // Remove null entries\n\n      // Validate and create pantries\n      let successCount = 0;\n      let errorCount = 0;\n      const errors: string[] = [];\n\n      for (let index = 0; index < pantries.length; index++) {\n        const pantryData = pantries[index];\n        try {\n          // More lenient validation - require at least name and one location field\n          if (!pantryData.name || (!pantryData.address && !pantryData.city)) {\n            errors.push(`Row ${index + 2}: Missing required fields (need at least name and address or city)`);\n            errorCount++;\n            continue;\n          }\n\n          // Fill in missing state with PA if not provided (since this is Lehigh Valley)\n          if (!pantryData.state) {\n            pantryData.state = 'PA';\n          }\n\n          // Set default city if missing but address exists\n          if (!pantryData.city && pantryData.address) {\n            pantryData.city = 'Unknown';\n          }\n\n          const validatedData = insertPantrySchema.parse(pantryData);\n          await storage.createPantry(validatedData);\n          successCount++;\n        } catch (error) {\n          errors.push(`Row ${index + 2}: ${error instanceof Error ? error.message : 'Invalid data'}`);\n          errorCount++;\n        }\n      }\n\n      res.json({ \n        message: `CSV processed successfully. ${successCount} pantries imported, ${errorCount} errors.`,\n        successCount,\n        errorCount,\n        errors: errors.slice(0, 10) // Only return first 10 errors\n      });\n    } catch (error) {\n      console.error(\"Error uploading CSV:\", error);\n      res.status(500).json({ message: \"Failed to process CSV file\" });\n    }\n  });\n\n  // Export routes\n  app.get('/api/admin/export/csv', isAuthenticated, async (req, res) => {\n    try {\n      const pantries = await storage.getPantries();\n      const csvContent = ExportService.generateBackupCSV(pantries);\n      const filename = ExportService.getExportFilename('backup');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Error exporting CSV:\", error);\n      res.status(500).json({ message: \"Failed to export data\" });\n    }\n  });\n\n  // SharePoint integration routes\n  app.post('/api/admin/sharepoint/test-connection', isAuthenticated, async (req, res) => {\n    try {\n      const settings = req.body;\n      const isConnected = await SharePointService.testConnection(settings);\n      res.json({ connected: isConnected });\n    } catch (error) {\n      console.error(\"Error testing SharePoint connection:\", error);\n      res.status(500).json({ message: \"Connection test failed\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post('/api/admin/sharepoint/sites', isAuthenticated, async (req, res) => {\n    try {\n      const settings = req.body;\n      const sites = await SharePointService.getSites(settings);\n      res.json(sites);\n    } catch (error) {\n      console.error(\"Error fetching SharePoint sites:\", error);\n      res.status(500).json({ message: \"Failed to fetch sites\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post('/api/admin/sharepoint/lists', isAuthenticated, async (req, res) => {\n    try {\n      const settings = req.body;\n      const lists = await SharePointService.getLists(settings);\n      res.json(lists);\n    } catch (error) {\n      console.error(\"Error fetching SharePoint lists:\", error);\n      res.status(500).json({ message: \"Failed to fetch lists\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post('/api/admin/sharepoint/columns', isAuthenticated, async (req, res) => {\n    try {\n      const settings = req.body;\n      const columns = await SharePointService.getListColumns(settings);\n      res.json(columns);\n    } catch (error) {\n      console.error(\"Error fetching SharePoint columns:\", error);\n      res.status(500).json({ message: \"Failed to fetch columns\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post('/api/admin/sharepoint/sync', isAuthenticated, async (req, res) => {\n    try {\n      const { settingsId } = req.body;\n      \n      if (!settingsId) {\n        return res.status(400).json({ message: \"Settings ID is required\" });\n      }\n\n      // Get the data sync settings\n      const allSettings = await storage.getDataSyncSettings();\n      const settings = allSettings.find(s => s.id === settingsId);\n      \n      if (!settings) {\n        return res.status(404).json({ message: \"Data sync settings not found\" });\n      }\n\n      // Update sync status to 'syncing'\n      await storage.updateDataSyncSettings(settingsId, { syncStatus: 'syncing', lastError: null });\n\n      try {\n        // Validate column mapping\n        const validation = await SharePointService.validateMapping(settings);\n        if (!validation.valid) {\n          await storage.updateDataSyncSettings(settingsId, { \n            syncStatus: 'error', \n            lastError: `Invalid column mapping: ${validation.errors.join(', ')}` \n          });\n          return res.status(400).json({ message: \"Invalid column mapping\", errors: validation.errors });\n        }\n\n        // Sync data from SharePoint\n        const pantries = await SharePointService.syncListData(settings);\n        \n        let imported = 0;\n        let updated = 0;\n        const errors: string[] = [];\n\n        // Process each pantry\n        for (const pantryData of pantries) {\n          try {\n            const validatedData = insertPantrySchema.parse(pantryData);\n            await storage.createPantry(validatedData);\n            imported++;\n          } catch (error) {\n            errors.push(`Failed to import pantry ${pantryData.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n          }\n        }\n\n        // Update sync status\n        await storage.updateDataSyncSettings(settingsId, { \n          syncStatus: 'success', \n          lastSync: new Date(),\n          lastError: errors.length > 0 ? `${errors.length} errors occurred` : null\n        });\n\n        const report = ExportService.generateSyncReport(imported, updated, errors);\n\n        res.json({ \n          message: `Sync completed. ${imported} pantries imported.`,\n          imported,\n          updated,\n          errors: errors.slice(0, 10), // Return first 10 errors\n          report\n        });\n\n      } catch (syncError) {\n        // Update sync status to error\n        const errorMessage = syncError instanceof Error ? syncError.message : 'Unknown sync error';\n        await storage.updateDataSyncSettings(settingsId, { \n          syncStatus: 'error', \n          lastError: errorMessage \n        });\n        throw syncError;\n      }\n\n    } catch (error) {\n      console.error(\"Error syncing SharePoint data:\", error);\n      res.status(500).json({ message: \"Sync failed\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":23484},"server/storage.ts":{"content":"import {\n  users,\n  pantries,\n  adminSettings,\n  dataSyncSettings,\n  type User,\n  type UpsertUser,\n  type Pantry,\n  type InsertPantry,\n  type AdminSettings,\n  type InsertAdminSettings,\n  type DataSyncSettings,\n  type InsertDataSyncSettings,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, ilike, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  updateUserRole(id: string, role: string, approvedBy?: string): Promise<User>;\n  updateUserStatus(id: string, status: string, approvedBy?: string): Promise<User>;\n  \n  // Pantry operations\n  getPantries(): Promise<Pantry[]>;\n  getPantry(id: string): Promise<Pantry | undefined>;\n  createPantry(pantry: InsertPantry): Promise<Pantry>;\n  updatePantry(id: string, pantry: Partial<InsertPantry>): Promise<Pantry>;\n  deletePantry(id: string): Promise<void>;\n  deleteAllPantries(): Promise<number>;\n  searchPantries(query: string, latitude?: number, longitude?: number, radius?: number): Promise<Pantry[]>;\n  \n  // Admin settings operations\n  getAdminSettings(): Promise<AdminSettings | undefined>;\n  updateAdminSettings(settings: InsertAdminSettings): Promise<AdminSettings>;\n  \n  // Data sync operations\n  getDataSyncSettings(): Promise<DataSyncSettings[]>;\n  createDataSyncSettings(settings: InsertDataSyncSettings): Promise<DataSyncSettings>;\n  updateDataSyncSettings(id: string, settings: Partial<InsertDataSyncSettings>): Promise<DataSyncSettings>;\n  deleteDataSyncSettings(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async updateUserRole(id: string, role: string, approvedBy?: string): Promise<User> {\n    const updateData: any = { \n      role, \n      updatedAt: new Date() \n    };\n    \n    if (approvedBy) {\n      updateData.approvedBy = approvedBy;\n      updateData.approvedAt = new Date();\n    }\n\n    const [user] = await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserStatus(id: string, status: string, approvedBy?: string): Promise<User> {\n    const updateData: any = { \n      status, \n      updatedAt: new Date() \n    };\n    \n    if (approvedBy && status === 'approved') {\n      updateData.approvedBy = approvedBy;\n      updateData.approvedAt = new Date();\n    }\n\n    const [user] = await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Pantry operations\n  async getPantries(): Promise<Pantry[]> {\n    return await db.select().from(pantries).where(eq(pantries.isActive, true));\n  }\n\n  async getPantry(id: string): Promise<Pantry | undefined> {\n    const [pantry] = await db.select().from(pantries).where(eq(pantries.id, id));\n    return pantry;\n  }\n\n  async createPantry(pantryData: InsertPantry): Promise<Pantry> {\n    const [pantry] = await db.insert(pantries).values(pantryData).returning();\n    return pantry;\n  }\n\n  async updatePantry(id: string, pantryData: Partial<InsertPantry>): Promise<Pantry> {\n    const [pantry] = await db\n      .update(pantries)\n      .set({ ...pantryData, updatedAt: new Date() })\n      .where(eq(pantries.id, id))\n      .returning();\n    return pantry;\n  }\n\n  async deletePantry(id: string): Promise<void> {\n    await db.update(pantries).set({ isActive: false }).where(eq(pantries.id, id));\n  }\n\n  async deleteAllPantries(): Promise<number> {\n    const result = await db.update(pantries).set({ isActive: false });\n    return result.rowCount || 0;\n  }\n\n  async searchPantries(query: string, latitude?: number, longitude?: number, radius?: number): Promise<Pantry[]> {\n    // Build conditions array\n    const conditions = [eq(pantries.isActive, true)];\n    \n    // Add text search conditions if query is provided\n    if (query && query.trim()) {\n      const searchTerm = `%${query.trim()}%`;\n      conditions.push(\n        sql`(\n          ${pantries.name} ILIKE ${searchTerm} OR\n          ${pantries.address} ILIKE ${searchTerm} OR\n          ${pantries.city} ILIKE ${searchTerm} OR\n          ${pantries.state} ILIKE ${searchTerm} OR\n          ${pantries.zipCode} ILIKE ${searchTerm}\n        )`\n      );\n    }\n\n    // If location-based search is requested, add distance filtering\n    if (latitude && longitude && radius) {\n      // Convert miles to kilometers (radius is in miles)\n      const radiusInKm = radius * 1.60934;\n      \n      // Use Haversine formula for distance calculation (in kilometers)\n      const distanceFormula = sql`\n        6371 * acos(\n          cos(radians(${latitude})) * \n          cos(radians(${pantries.latitude}::decimal)) * \n          cos(radians(${pantries.longitude}::decimal) - radians(${longitude})) + \n          sin(radians(${latitude})) * \n          sin(radians(${pantries.latitude}::decimal))\n        )\n      `;\n      \n      conditions.push(\n        sql`${pantries.latitude} IS NOT NULL`,\n        sql`${pantries.longitude} IS NOT NULL`,\n        sql`${distanceFormula} <= ${radiusInKm}`\n      );\n    }\n\n    return await db.select().from(pantries).where(and(...conditions));\n  }\n\n  // Admin settings operations\n  async getAdminSettings(): Promise<AdminSettings | undefined> {\n    const [settings] = await db.select().from(adminSettings).limit(1);\n    return settings;\n  }\n\n  async updateAdminSettings(settingsData: InsertAdminSettings): Promise<AdminSettings> {\n    // Try to update existing settings first\n    const existing = await this.getAdminSettings();\n    \n    if (existing) {\n      const [settings] = await db\n        .update(adminSettings)\n        .set({ ...settingsData, updatedAt: new Date() })\n        .where(eq(adminSettings.id, existing.id))\n        .returning();\n      return settings;\n    } else {\n      // Create new settings if none exist\n      const [settings] = await db.insert(adminSettings).values(settingsData).returning();\n      return settings;\n    }\n  }\n\n  // Data sync operations\n  async getDataSyncSettings(): Promise<DataSyncSettings[]> {\n    return await db.select().from(dataSyncSettings).where(eq(dataSyncSettings.isActive, true));\n  }\n\n  async createDataSyncSettings(settingsData: InsertDataSyncSettings): Promise<DataSyncSettings> {\n    const [settings] = await db.insert(dataSyncSettings).values(settingsData).returning();\n    return settings;\n  }\n\n  async updateDataSyncSettings(id: string, settingsData: Partial<InsertDataSyncSettings>): Promise<DataSyncSettings> {\n    const [settings] = await db\n      .update(dataSyncSettings)\n      .set({ ...settingsData, updatedAt: new Date() })\n      .where(eq(dataSyncSettings.id, id))\n      .returning();\n    return settings;\n  }\n\n  async deleteDataSyncSettings(id: string): Promise<void> {\n    await db.update(dataSyncSettings).set({ isActive: false }).where(eq(dataSyncSettings.id, id));\n  }\n\n  // Initialization function to set up first super admin\n  async ensureFirstSuperAdmin(): Promise<void> {\n    try {\n      // Check if any super admin exists\n      const [superAdmin] = await db\n        .select()\n        .from(users)\n        .where(eq(users.role, 'super_admin'))\n        .limit(1);\n      \n      if (superAdmin) {\n        console.log('Super admin already exists, skipping initialization');\n        return;\n      }\n\n      // Get the first user (oldest by creation date)\n      const [firstUser] = await db\n        .select()\n        .from(users)\n        .orderBy(users.createdAt)\n        .limit(1);\n\n      if (!firstUser) {\n        console.log('No users found, super admin will be set up when first user signs up');\n        return;\n      }\n\n      // Promote first user to super admin\n      await db\n        .update(users)\n        .set({\n          role: 'super_admin',\n          status: 'approved',\n          approvedBy: firstUser.id, // Self-approved\n          approvedAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, firstUser.id));\n\n      console.log(`Promoted first user (${firstUser.email}) to super admin`);\n    } catch (error) {\n      console.error('Error setting up first super admin:', error);\n      // Don't throw - this shouldn't break app startup\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8855},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"user\"), // 'user', 'admin', 'super_admin'\n  status: varchar(\"status\").default(\"pending\"), // 'pending', 'approved', 'rejected'\n  approvedBy: varchar(\"approved_by\"), // ID of admin who approved\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Food pantries table\nexport const pantries = pgTable(\"pantries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  city: varchar(\"city\").notNull(),\n  state: varchar(\"state\").notNull(),\n  zipCode: varchar(\"zip_code\").notNull(),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  website: varchar(\"website\"),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 7 }),\n  longitude: decimal(\"longitude\", { precision: 10, scale: 7 }),\n  hours: text(\"hours\"),\n  description: text(\"description\"),\n  services: text(\"services\").array(),\n  accessType: varchar(\"access_type\"), // 'walk-in', 'appointment', 'mobile'\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Admin settings table for white-labeling\nexport const adminSettings = pgTable(\"admin_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  organizationName: text(\"organization_name\").notNull(),\n  primaryColor: varchar(\"primary_color\").default(\"#0F766E\"),\n  secondaryColor: varchar(\"secondary_color\").default(\"#EA580C\"),\n  logoUrl: varchar(\"logo_url\"),\n  faviconUrl: varchar(\"favicon_url\"),\n  defaultLatitude: decimal(\"default_latitude\", { precision: 10, scale: 7 }).default(\"40.6259\"),\n  defaultLongitude: decimal(\"default_longitude\", { precision: 10, scale: 7 }).default(\"-75.3697\"),\n  defaultZoom: varchar(\"default_zoom\").default(\"12\"),\n  mapStyle: varchar(\"map_style\").default(\"standard\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Data sync settings\nexport const dataSyncSettings = pgTable(\"data_sync_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sourceType: varchar(\"source_type\").notNull(), // 'sharepoint', 'google_sheets', 'csv'\n  sourceUrl: text(\"source_url\"),\n  apiKey: varchar(\"api_key\"),\n  \n  // SharePoint-specific fields\n  tenantId: varchar(\"tenant_id\"), // Azure AD tenant ID\n  clientId: varchar(\"client_id\"), // Azure AD app client ID\n  clientSecret: varchar(\"client_secret\"), // Azure AD app client secret\n  siteId: varchar(\"site_id\"), // SharePoint site ID\n  listId: varchar(\"list_id\"), // SharePoint list ID\n  listName: varchar(\"list_name\"), // Human-readable list name\n  \n  // Column mapping for SharePoint lists\n  columnMapping: jsonb(\"column_mapping\"), // Maps SharePoint columns to pantry fields\n  \n  lastSync: timestamp(\"last_sync\"),\n  syncStatus: varchar(\"sync_status\").default(\"pending\"), // 'pending', 'syncing', 'success', 'error'\n  lastError: text(\"last_error\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Schema exports\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type Pantry = typeof pantries.$inferSelect;\nexport type InsertPantry = typeof pantries.$inferInsert;\n\nexport type AdminSettings = typeof adminSettings.$inferSelect;\nexport type InsertAdminSettings = typeof adminSettings.$inferInsert;\n\nexport type DataSyncSettings = typeof dataSyncSettings.$inferSelect;\nexport type InsertDataSyncSettings = typeof dataSyncSettings.$inferInsert;\n\n// Zod schemas\nexport const insertPantrySchema = createInsertSchema(pantries).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAdminSettingsSchema = createInsertSchema(adminSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDataSyncSettingsSchema = createInsertSchema(dataSyncSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n","size_bytes":4968},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\nimport AccessDenied from \"./pages/access-denied\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/admin\">\n        {!isAuthenticated ? (\n          <Landing />\n        ) : user?.status !== 'approved' ? (\n          <AccessDenied />\n        ) : user?.role === 'admin' || user?.role === 'super_admin' ? (\n          <Admin />\n        ) : (\n          <AccessDenied />\n        )}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1234},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom styles for map markers */\n.user-location-marker {\n  filter: hue-rotate(240deg) brightness(1.2) saturate(1.5);\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(30.75, 84.1%, 53.14%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(75.85, 37.06%, 28.04%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --spacing: 0.25rem;\n  --tracking-normal: 0em;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.map-container {\n  background: linear-gradient(135deg, hsl(158, 45%, 92%) 0%, hsl(210, 20%, 96%) 100%);\n  position: relative;\n}\n\n.map-placeholder {\n  background-image: \n    radial-gradient(circle at 25% 25%, hsl(158, 65%, 24%) 2px, transparent 2px),\n    radial-gradient(circle at 75% 75%, hsl(20, 85%, 48%) 2px, transparent 2px),\n    radial-gradient(circle at 50% 10%, hsl(158, 65%, 24%) 1px, transparent 1px);\n  background-size: 50px 50px, 40px 40px, 30px 30px;\n}\n\n.selected-marker {\n  filter: hue-rotate(60deg) saturate(1.5);\n}\n","size_bytes":6026},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/layout/header\";\nimport AdminDashboard from \"@/components/admin/admin-dashboard\";\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You need to log in to access the admin dashboard.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect in useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Header />\n      <div className=\"p-6\">\n        <AdminDashboard />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1352},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport Header from \"@/components/layout/header\";\nimport SearchSidebar from \"@/components/search/search-sidebar\";\nimport PantryDetailModal from \"@/components/pantry/pantry-detail-modal\";\nimport InteractiveMap from \"@/components/map/interactive-map\";\nimport { Pantry } from \"@shared/schema\";\n\nexport default function Home() {\n  const [selectedPantry, setSelectedPantry] = useState<Pantry | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [mapCenter, setMapCenter] = useState<[number, number]>([40.6259, -75.3697]); // Bethlehem, PA\n  const [selectedPantryId, setSelectedPantryId] = useState<string | null>(null);\n  const [selectedDistance, setSelectedDistance] = useState(\"10\");\n  const [selectedFilter, setSelectedFilter] = useState(\"all\");\n\n  const { data: pantries = [], isLoading } = useQuery<Pantry[]>({\n    queryKey: ['/api/pantries'],\n  });\n\n  const { data: searchResults = [], isLoading: isSearching } = useQuery<Pantry[]>({\n    queryKey: ['/api/pantries/search', searchQuery, mapCenter[0], mapCenter[1], selectedDistance],\n    queryFn: () => {\n      const params = new URLSearchParams({\n        q: searchQuery,\n        lat: mapCenter[0].toString(),\n        lng: mapCenter[1].toString(),\n        radius: selectedDistance\n      });\n      return fetch(`/api/pantries/search?${params}`).then(res => res.json());\n    },\n    enabled: searchQuery.length > 0,\n  });\n\n  const displayPantries = searchQuery ? searchResults : pantries;\n\n  const handlePantrySelect = (pantry: Pantry) => {\n    setSelectedPantry(pantry);\n    // Don't automatically center the map when opening modal from sidebar\n    // Let users manually navigate the map if they want to see the location\n  };\n\n  const handleMapPantrySelect = (pantry: Pantry) => {\n    setSelectedPantry(pantry);\n    // When clicking from map, center on the pantry location\n    if (pantry.latitude && pantry.longitude) {\n      setMapCenter([parseFloat(pantry.latitude), parseFloat(pantry.longitude)]);\n    }\n  };\n\n  const handleSearch = (query: string, lat?: number, lng?: number) => {\n    setSearchQuery(query);\n    if (lat && lng) {\n      setMapCenter([lat, lng]);\n    }\n  };\n\n  const handleLocationUpdate = (lat: number, lng: number) => {\n    setMapCenter([lat, lng]);\n  };\n\n  const handleShowOnMap = (pantry: Pantry) => {\n    if (pantry.latitude && pantry.longitude) {\n      const lat = parseFloat(pantry.latitude);\n      const lng = parseFloat(pantry.longitude);\n      \n      if (!isNaN(lat) && !isNaN(lng)) {\n        const newCenter: [number, number] = [lat, lng];\n        setMapCenter(newCenter);\n        setSelectedPantryId(pantry.id);\n      }\n    }\n  };\n\n  const handleMapReset = () => {\n    setSelectedPantryId(null);\n    // Reset to default center and search\n    setMapCenter([40.6259, -75.3697]);\n    setSearchQuery('');\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Header />\n      \n      {/* Desktop layout: Sidebar + Map */}\n      <div className=\"hidden md:flex h-[calc(100vh-4rem)]\">\n        <SearchSidebar\n          pantries={displayPantries}\n          isLoading={isLoading || isSearching}\n          onPantrySelect={handlePantrySelect}\n          onShowOnMap={handleShowOnMap}\n          onSearch={handleSearch}\n          searchQuery={searchQuery}\n          selectedDistance={selectedDistance}\n          onDistanceChange={setSelectedDistance}\n          selectedFilter={selectedFilter}\n          onFilterChange={setSelectedFilter}\n          selectedPantryId={selectedPantryId}\n        />\n        \n        <div className=\"flex-1 bg-muted/30 relative\">\n          <InteractiveMap\n            pantries={displayPantries}\n            center={mapCenter}\n            selectedPantry={selectedPantry}\n            onPantrySelect={handleMapPantrySelect}\n            onLocationUpdate={handleLocationUpdate}\n            onMapReset={handleMapReset}\n            className=\"h-full w-full\"\n          />\n        </div>\n      </div>\n\n      {/* Mobile layout: Fixed search at top + Full screen map */}\n      <div className=\"md:hidden flex flex-col h-[calc(100vh-4rem)]\">\n        {/* Fixed search bar at top */}\n        <div className=\"bg-white/95 backdrop-blur-sm border-b border-gray-200 p-4 shadow-sm\">\n          <form onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target as HTMLFormElement);\n            const query = formData.get('search') as string;\n            if (query?.trim()) {\n              handleSearch(query.trim());\n            }\n          }} className=\"space-y-3\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n              <Input\n                name=\"search\"\n                type=\"text\"\n                placeholder=\"Search address or zip code\"\n                defaultValue={searchQuery}\n                className=\"pl-10 h-12 text-base bg-white border-gray-300\"\n                data-testid=\"input-search-mobile\"\n              />\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Select value={selectedDistance} onValueChange={setSelectedDistance}>\n                <SelectTrigger className=\"flex-1 h-10 bg-white\">\n                  <SelectValue placeholder=\"Distance\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"5\">5 miles</SelectItem>\n                  <SelectItem value=\"10\">10 miles</SelectItem>\n                  <SelectItem value=\"25\">25 miles</SelectItem>\n                  <SelectItem value=\"50\">50 miles</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Select value={selectedFilter} onValueChange={setSelectedFilter}>\n                <SelectTrigger className=\"flex-1 h-10 bg-white\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Pantries</SelectItem>\n                  <SelectItem value=\"walk-in\">Walk-in</SelectItem>\n                  <SelectItem value=\"appointment\">By Appointment</SelectItem>\n                  <SelectItem value=\"mobile\">Mobile Pantry</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </form>\n          \n          {/* Results count */}\n          {searchQuery && (\n            <div className=\"mt-2 pt-2 border-t border-gray-200\">\n              <p className=\"text-sm text-gray-600\">\n                {isLoading || isSearching ? \"Searching...\" : `${displayPantries.length} pantries found`}\n              </p>\n            </div>\n          )}\n        </div>\n        \n        {/* Full screen map below search */}\n        <div className=\"flex-1 relative\">\n          <InteractiveMap\n            pantries={displayPantries}\n            center={mapCenter}\n            selectedPantry={selectedPantry}\n            onPantrySelect={handleMapPantrySelect}\n            onLocationUpdate={handleLocationUpdate}\n            onMapReset={handleMapReset}\n            className=\"h-full w-full\"\n          />\n          \n          {/* Results drawer (only when there are search results) */}\n          {searchQuery && displayPantries.length > 0 && (\n            <div className=\"absolute bottom-0 left-0 right-0 z-20 bg-white rounded-t-lg shadow-lg border-t border-gray-200 max-h-60 overflow-y-auto\">\n              <div className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h3 className=\"font-semibold text-gray-900\">\n                    {displayPantries.length} pantries found\n                  </h3>\n                  <button \n                    onClick={() => setSearchQuery('')}\n                    className=\"text-sm text-gray-500 hover:text-gray-700\"\n                  >\n                    Clear\n                  </button>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  {displayPantries.slice(0, 10).map((pantry) => (\n                    <div \n                      key={pantry.id}\n                      className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg bg-white hover:bg-gray-50 cursor-pointer\"\n                      onClick={() => handlePantrySelect(pantry)}\n                    >\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-sm text-gray-900 truncate\">{pantry.name}</h4>\n                        <p className=\"text-xs text-gray-500 truncate\">\n                          {pantry.address}, {pantry.city}, {pantry.state}\n                        </p>\n                      </div>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleShowOnMap(pantry);\n                        }}\n                        className=\"ml-2 text-xs text-primary hover:text-primary/80 font-medium\"\n                      >\n                        View\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {selectedPantry && (\n        <PantryDetailModal\n          pantry={selectedPantry}\n          onClose={() => setSelectedPantry(null)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":9636},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, Search, Users, Clock } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <MapPin className=\"text-primary text-2xl\" />\n              <div>\n                <h1 className=\"text-xl font-semibold text-foreground\">Find a Pantry</h1>\n                <p className=\"text-sm text-muted-foreground\">Second Harvest Food Bank of the Lehigh Valley</p>\n              </div>\n            </div>\n            <Button \n              onClick={() => window.location.href = '/api/login'}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-login\"\n            >\n              Admin Login\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-primary to-primary/80 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl font-bold text-primary-foreground mb-6\">\n            Find Food Assistance Near You\n          </h2>\n          <p className=\"text-xl text-primary-foreground/90 mb-8 max-w-3xl mx-auto\">\n            Locate food pantries, soup kitchens, and other food assistance programs in the Lehigh Valley area. \n            Our directory helps connect community members with the resources they need.\n          </p>\n          <Button \n            size=\"lg\" \n            className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90 text-lg px-8 py-3\"\n            onClick={() => {\n              const mapSection = document.getElementById('pantry-finder');\n              mapSection?.scrollIntoView({ behavior: 'smooth' });\n            }}\n            data-testid=\"button-find-pantries\"\n          >\n            <Search className=\"mr-2 h-5 w-5\" />\n            Find Food Pantries\n          </Button>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-foreground mb-4\">How We Help</h3>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Our comprehensive directory makes it easy to find food assistance when and where you need it.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"text-center\">\n              <CardHeader>\n                <MapPin className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>Location-Based Search</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Find pantries near your location with our interactive map and distance-based search.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader>\n                <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>Real-Time Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Get up-to-date hours, contact information, and availability for each food pantry.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader>\n                <Users className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>Community Focused</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Supporting the Lehigh Valley community with comprehensive food assistance resources.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Simple Pantry Finder Section */}\n      <section id=\"pantry-finder\" className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h3 className=\"text-3xl font-bold text-foreground mb-8\">Ready to Find Food Assistance?</h3>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Access our full directory with interactive map and detailed pantry information.\n          </p>\n          <Button \n            size=\"lg\"\n            onClick={() => window.location.href = '/'}\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            data-testid=\"button-access-directory\"\n          >\n            Access Pantry Directory\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <p className=\"text-muted-foreground\">\n            © 2024 Second Harvest Food Bank of the Lehigh Valley. All rights reserved.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":5537},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/admin/admin-dashboard.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Save, Upload, Download, RefreshCw, Plus, FileText, CheckCircle, AlertCircle, Edit, Trash2 } from \"lucide-react\";\nimport { AdminSettings, InsertAdminSettings, DataSyncSettings, InsertDataSyncSettings, User } from \"@shared/schema\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"branding\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploadStatus, setUploadStatus] = useState<'idle' | 'uploading' | 'success' | 'error'>('idle');\n  const [uploadResults, setUploadResults] = useState<any>(null);\n  \n  // SharePoint configuration state\n  const [showSharePointDialog, setShowSharePointDialog] = useState(false);\n  const [sharePointForm, setSharePointForm] = useState({\n    tenantId: '',\n    clientId: '',\n    clientSecret: '',\n    siteId: '',\n    listId: '',\n    listName: ''\n  });\n  const [sharepointSites, setSharepointSites] = useState<any[]>([]);\n  const [sharepointLists, setSharepointLists] = useState<any[]>([]);\n  const [sharepointColumns, setSharepointColumns] = useState<any[]>([]);\n  const [columnMapping, setColumnMapping] = useState<Record<string, string>>({});\n  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'testing' | 'connected' | 'error'>('idle');\n  const [syncStatus, setSyncStatus] = useState<'idle' | 'syncing' | 'success' | 'error'>('idle');\n  const [syncResults, setSyncResults] = useState<{imported: number, errors: string[]} | null>(null);\n\n  // Fetch admin settings\n  const { data: settings, isLoading } = useQuery<AdminSettings>({\n    queryKey: ['/api/admin/settings'],\n  });\n\n  // Fetch data sync settings\n  const { data: dataSyncSettings, isLoading: isLoadingDataSync } = useQuery<DataSyncSettings[]>({\n    queryKey: ['/api/admin/data-sync'],\n  });\n\n  // Fetch users (super admin only)\n  const { data: users = [], isLoading: isLoadingUsers } = useQuery<User[]>({\n    queryKey: ['/api/admin/users'],\n    retry: false,\n  });\n\n  // Update settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: InsertAdminSettings) => {\n      return await apiRequest('PUT', '/api/admin/settings', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/settings'] });\n      toast({\n        title: \"Settings Updated\",\n        description: \"Admin settings have been saved successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveSettings = (formData: FormData) => {\n    const data: InsertAdminSettings = {\n      organizationName: formData.get('organizationName') as string,\n      primaryColor: formData.get('primaryColor') as string,\n      secondaryColor: formData.get('secondaryColor') as string,\n      logoUrl: formData.get('logoUrl') as string || undefined,\n      faviconUrl: formData.get('faviconUrl') as string || undefined,\n      defaultLatitude: formData.get('defaultLatitude') as string,\n      defaultLongitude: formData.get('defaultLongitude') as string,\n      defaultZoom: formData.get('defaultZoom') as string,\n      mapStyle: formData.get('mapStyle') as string,\n    };\n    \n    updateSettingsMutation.mutate(data);\n  };\n\n  // CSV Upload mutation\n  const csvUploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('csvFile', file);\n      \n      const response = await fetch('/api/admin/upload-csv', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include'\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setUploadStatus('success');\n      setUploadResults(data);\n      queryClient.invalidateQueries({ queryKey: ['/api/pantries'] });\n      toast({\n        title: \"CSV Upload Successful\",\n        description: `${data.successCount} pantries imported successfully.`,\n      });\n    },\n    onError: (error: Error) => {\n      setUploadStatus('error');\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n    \n    if (!file.name.endsWith('.csv')) {\n      toast({\n        title: \"Invalid File Type\",\n        description: \"Please select a CSV file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setUploadStatus('uploading');\n    setUploadResults(null);\n    csvUploadMutation.mutate(file);\n  };\n\n  // User management mutations\n  const updateUserRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string, role: string }) => {\n      return await apiRequest('PUT', `/api/admin/users/${userId}/role`, { role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      toast({\n        title: \"User Role Updated\",\n        description: \"The user's role has been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserStatusMutation = useMutation({\n    mutationFn: async ({ userId, status }: { userId: string, status: string }) => {\n      return await apiRequest('PUT', `/api/admin/users/${userId}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      toast({\n        title: \"User Status Updated\",\n        description: \"The user's status has been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user status. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const triggerFileUpload = () => {\n    fileInputRef.current?.click();\n  };\n\n  // Export functionality\n  const handleExportData = async () => {\n    try {\n      const response = await fetch('/api/admin/export/csv', {\n        method: 'GET',\n        credentials: 'include'\n      });\n      \n      if (!response.ok) {\n        throw new Error('Export failed');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `pantry-backup-${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Export Successful\",\n        description: \"Your data has been exported successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export data. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // SharePoint functions\n  const testSharePointConnection = async () => {\n    setConnectionStatus('testing');\n    try {\n      const response = await apiRequest('POST', '/api/admin/sharepoint/test-connection', sharePointForm);\n      const data = await response.json();\n      if (data.connected) {\n        setConnectionStatus('connected');\n        toast({\n          title: \"Connection Successful\",\n          description: \"SharePoint connection established successfully.\",\n        });\n      } else {\n        setConnectionStatus('error');\n        toast({\n          title: \"Connection Failed\",\n          description: \"Failed to connect to SharePoint. Please check your credentials.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      setConnectionStatus('error');\n      toast({\n        title: \"Connection Error\",\n        description: \"Failed to test SharePoint connection.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const fetchSharePointSites = async () => {\n    try {\n      // Clear all previously loaded data\n      setSharepointSites([]);\n      setSharepointLists([]);\n      setSharepointColumns([]);\n      setColumnMapping({});\n      setSharePointForm(prev => ({\n        ...prev,\n        siteId: '',\n        listId: '',\n        listName: ''\n      }));\n\n      const response = await apiRequest('POST', '/api/admin/sharepoint/sites', sharePointForm);\n      const sites = await response.json();\n      setSharepointSites(sites);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch SharePoint sites.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const fetchSharePointLists = async (siteId: string) => {\n    try {\n      const response = await apiRequest('POST', '/api/admin/sharepoint/lists', {\n        ...sharePointForm,\n        siteId\n      });\n      const lists = await response.json();\n      setSharepointLists(lists);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch SharePoint lists.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const fetchSharePointColumns = async (siteId: string, listId: string) => {\n    try {\n      const response = await apiRequest('POST', '/api/admin/sharepoint/columns', {\n        ...sharePointForm,\n        siteId,\n        listId\n      });\n      const columns = await response.json();\n      setSharepointColumns(columns);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch SharePoint columns.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const saveSharePointSettings = async () => {\n    try {\n      // Filter out \"none\" values from column mapping\n      const filteredColumnMapping = Object.fromEntries(\n        Object.entries(columnMapping).filter(([_, value]) => value && value !== 'none')\n      );\n      \n      const settingsData: InsertDataSyncSettings = {\n        sourceType: 'sharepoint',\n        tenantId: sharePointForm.tenantId,\n        clientId: sharePointForm.clientId,\n        clientSecret: sharePointForm.clientSecret,\n        siteId: sharePointForm.siteId,\n        listId: sharePointForm.listId,\n        listName: sharePointForm.listName,\n        columnMapping: filteredColumnMapping\n      };\n\n      await apiRequest('POST', '/api/admin/data-sync', settingsData);\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/data-sync'] });\n      setShowSharePointDialog(false);\n      \n      toast({\n        title: \"SharePoint Configuration Saved\",\n        description: \"SharePoint integration has been configured successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save SharePoint configuration.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSharePointSync = async () => {\n    const syncSettings = dataSyncSettings?.find(s => s.sourceType === 'sharepoint');\n    if (!syncSettings) {\n      toast({\n        title: \"Error\",\n        description: \"No SharePoint configuration found.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSyncStatus('syncing');\n    setSyncResults(null);\n    \n    try {\n      const response = await apiRequest('POST', '/api/admin/sharepoint/sync', {\n        settingsId: syncSettings.id\n      });\n      \n      const results = await response.json();\n      setSyncStatus('success');\n      setSyncResults(results);\n      \n      // Refresh pantries data\n      queryClient.invalidateQueries({ queryKey: ['/api/pantries'] });\n      \n      toast({\n        title: \"Sync Completed\",\n        description: `Successfully imported ${results.imported} pantries.`,\n      });\n      \n      if (results.errors && results.errors.length > 0) {\n        toast({\n          title: \"Sync Warnings\",\n          description: `${results.errors.length} items had issues. Check the sync results for details.`,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      setSyncStatus('error');\n      toast({\n        title: \"Sync Failed\",\n        description: \"Failed to sync data from SharePoint. Please check your configuration.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"text-admin-title\">\n          Admin Dashboard\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Manage your food pantry directory settings and data sources.\n        </p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"branding\" data-testid=\"tab-branding\">Branding</TabsTrigger>\n          <TabsTrigger value=\"geographic\" data-testid=\"tab-geographic\">Geographic</TabsTrigger>\n          <TabsTrigger value=\"data-sources\" data-testid=\"tab-data-sources\">Data Sources</TabsTrigger>\n          <TabsTrigger value=\"pantries\" data-testid=\"tab-pantries\">Pantries</TabsTrigger>\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">Users</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"branding\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>White Labeling & Branding</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const formData = new FormData(e.currentTarget);\n                  handleSaveSettings(formData);\n                }}\n                className=\"space-y-4\"\n              >\n                <div>\n                  <Label htmlFor=\"organizationName\">Organization Name</Label>\n                  <Input\n                    id=\"organizationName\"\n                    name=\"organizationName\"\n                    defaultValue={settings?.organizationName || \"Second Harvest Food Bank of the Lehigh Valley\"}\n                    data-testid=\"input-org-name\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"primaryColor\">Primary Color</Label>\n                    <div className=\"flex items-center space-x-2\">\n                      <div \n                        className=\"w-8 h-8 rounded border border-border\"\n                        style={{ backgroundColor: settings?.primaryColor || '#0F766E' }}\n                      ></div>\n                      <Input\n                        id=\"primaryColor\"\n                        name=\"primaryColor\"\n                        type=\"color\"\n                        defaultValue={settings?.primaryColor || '#0F766E'}\n                        className=\"w-20\"\n                        data-testid=\"input-primary-color\"\n                      />\n                      <Input\n                        name=\"primaryColor\"\n                        defaultValue={settings?.primaryColor || '#0F766E'}\n                        className=\"flex-1\"\n                        data-testid=\"input-primary-color-hex\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"secondaryColor\">Secondary Color</Label>\n                    <div className=\"flex items-center space-x-2\">\n                      <div \n                        className=\"w-8 h-8 rounded border border-border\"\n                        style={{ backgroundColor: settings?.secondaryColor || '#EA580C' }}\n                      ></div>\n                      <Input\n                        id=\"secondaryColor\"\n                        name=\"secondaryColor\"\n                        type=\"color\"\n                        defaultValue={settings?.secondaryColor || '#EA580C'}\n                        className=\"w-20\"\n                        data-testid=\"input-secondary-color\"\n                      />\n                      <Input\n                        name=\"secondaryColor\"\n                        defaultValue={settings?.secondaryColor || '#EA580C'}\n                        className=\"flex-1\"\n                        data-testid=\"input-secondary-color-hex\"\n                      />\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"logoUrl\">Logo URL</Label>\n                  <Input\n                    id=\"logoUrl\"\n                    name=\"logoUrl\"\n                    type=\"url\"\n                    placeholder=\"https://example.com/logo.png\"\n                    defaultValue={settings?.logoUrl || ''}\n                    data-testid=\"input-logo-url\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"faviconUrl\">Favicon URL</Label>\n                  <Input\n                    id=\"faviconUrl\"\n                    name=\"faviconUrl\"\n                    type=\"url\"\n                    placeholder=\"https://example.com/favicon.ico\"\n                    defaultValue={settings?.faviconUrl || ''}\n                    data-testid=\"input-favicon-url\"\n                  />\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Upload a .ico, .png, or .svg file to customize your app's favicon\n                  </p>\n                </div>\n\n                {/* Hidden fields for geographic settings */}\n                <input type=\"hidden\" name=\"defaultLatitude\" value={settings?.defaultLatitude || '40.6259'} />\n                <input type=\"hidden\" name=\"defaultLongitude\" value={settings?.defaultLongitude || '-75.3697'} />\n                <input type=\"hidden\" name=\"defaultZoom\" value={settings?.defaultZoom || '12'} />\n                <input type=\"hidden\" name=\"mapStyle\" value={settings?.mapStyle || 'standard'} />\n                \n                <Button \n                  type=\"submit\" \n                  disabled={updateSettingsMutation.isPending}\n                  data-testid=\"button-save-branding\"\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  {updateSettingsMutation.isPending ? 'Saving...' : 'Save Changes'}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"geographic\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Geographic Settings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const formData = new FormData(e.currentTarget);\n                  handleSaveSettings(formData);\n                }}\n                className=\"space-y-4\"\n              >\n                <div>\n                  <Label htmlFor=\"defaultCenter\">Default Center Location</Label>\n                  <Input\n                    id=\"defaultCenter\"\n                    placeholder=\"Enter address or coordinates\"\n                    defaultValue=\"Bethlehem, PA\"\n                    data-testid=\"input-default-center\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"defaultLatitude\">Latitude</Label>\n                    <Input\n                      id=\"defaultLatitude\"\n                      name=\"defaultLatitude\"\n                      type=\"number\"\n                      step=\"any\"\n                      defaultValue={settings?.defaultLatitude || '40.6259'}\n                      data-testid=\"input-latitude\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"defaultLongitude\">Longitude</Label>\n                    <Input\n                      id=\"defaultLongitude\"\n                      name=\"defaultLongitude\"\n                      type=\"number\"\n                      step=\"any\"\n                      defaultValue={settings?.defaultLongitude || '-75.3697'}\n                      data-testid=\"input-longitude\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"defaultZoom\">Default Zoom Level</Label>\n                    <Select name=\"defaultZoom\" defaultValue={settings?.defaultZoom || '12'}>\n                      <SelectTrigger id=\"defaultZoom\" data-testid=\"select-zoom\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"8\">Regional Level (8)</SelectItem>\n                        <SelectItem value=\"10\">County Level (10)</SelectItem>\n                        <SelectItem value=\"12\">City Level (12)</SelectItem>\n                        <SelectItem value=\"14\">Neighborhood Level (14)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"mapStyle\">Map Style</Label>\n                  <Select name=\"mapStyle\" defaultValue={settings?.mapStyle || 'standard'}>\n                    <SelectTrigger id=\"mapStyle\" data-testid=\"select-map-style\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"standard\">Standard</SelectItem>\n                      <SelectItem value=\"satellite\">Satellite</SelectItem>\n                      <SelectItem value=\"terrain\">Terrain</SelectItem>\n                      <SelectItem value=\"hybrid\">Hybrid</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Hidden fields for branding settings */}\n                <input type=\"hidden\" name=\"organizationName\" value={settings?.organizationName || 'Second Harvest Food Bank of the Lehigh Valley'} />\n                <input type=\"hidden\" name=\"primaryColor\" value={settings?.primaryColor || '#0F766E'} />\n                <input type=\"hidden\" name=\"secondaryColor\" value={settings?.secondaryColor || '#EA580C'} />\n                <input type=\"hidden\" name=\"logoUrl\" value={settings?.logoUrl || ''} />\n                \n                <Button \n                  type=\"submit\" \n                  disabled={updateSettingsMutation.isPending}\n                  data-testid=\"button-save-geographic\"\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  {updateSettingsMutation.isPending ? 'Saving...' : 'Save Changes'}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"data-sources\" className=\"space-y-6\">\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Upload className=\"h-5 w-5 mr-2\" />\n                  SharePoint Integration\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Connect to SharePoint lists for automatic data synchronization.\n                </p>\n                {dataSyncSettings?.find(s => s.sourceType === 'sharepoint') ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n                      <div className=\"flex items-center\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                        <span className=\"text-sm font-medium text-green-800\">SharePoint Connected</span>\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-green-700 border-green-300\">\n                        {dataSyncSettings.find(s => s.sourceType === 'sharepoint')?.syncStatus || 'connected'}\n                      </Badge>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button \n                        className=\"flex-1\" \n                        variant=\"outline\" \n                        onClick={() => setShowSharePointDialog(true)}\n                        data-testid=\"button-configure-sharepoint\"\n                      >\n                        <Edit className=\"h-4 w-4 mr-2\" />\n                        Configure\n                      </Button>\n                      <Button \n                        className=\"flex-1\" \n                        variant=\"outline\"\n                        onClick={handleSharePointSync}\n                        disabled={syncStatus === 'syncing'}\n                        data-testid=\"button-sync-sharepoint\"\n                      >\n                        <RefreshCw className={`h-4 w-4 mr-2 ${syncStatus === 'syncing' ? 'animate-spin' : ''}`} />\n                        {syncStatus === 'syncing' ? 'Syncing...' : 'Sync Now'}\n                      </Button>\n                    </div>\n                    \n                    {/* Sync Results Display */}\n                    {syncResults && (\n                      <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                        <h4 className=\"font-medium text-blue-800 mb-2\">Last Sync Results</h4>\n                        <div className=\"text-sm text-blue-700\">\n                          <p>✅ Imported: {syncResults.imported} pantries</p>\n                          {syncResults.errors && syncResults.errors.length > 0 && (\n                            <div className=\"mt-2\">\n                              <p className=\"text-red-700\">⚠️ Errors ({syncResults.errors.length}):</p>\n                              <ul className=\"mt-1 ml-4 list-disc\">\n                                {syncResults.errors.slice(0, 3).map((error, index) => (\n                                  <li key={index} className=\"text-red-600 text-xs\">{error}</li>\n                                ))}\n                                {syncResults.errors.length > 3 && (\n                                  <li className=\"text-red-600 text-xs\">...and {syncResults.errors.length - 3} more</li>\n                                )}\n                              </ul>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <Dialog open={showSharePointDialog} onOpenChange={setShowSharePointDialog}>\n                    <DialogTrigger asChild>\n                      <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-connect-sharepoint\">\n                        <i className=\"fab fa-microsoft mr-2\"></i>\n                        Connect SharePoint\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                      <DialogHeader>\n                        <DialogTitle>Configure SharePoint Integration</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"tenantId\">Tenant ID</Label>\n                            <Input\n                              id=\"tenantId\"\n                              value={sharePointForm.tenantId}\n                              onChange={(e) => setSharePointForm({...sharePointForm, tenantId: e.target.value})}\n                              placeholder=\"your-tenant-id\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"clientId\">Client ID</Label>\n                            <Input\n                              id=\"clientId\"\n                              value={sharePointForm.clientId}\n                              onChange={(e) => setSharePointForm({...sharePointForm, clientId: e.target.value})}\n                              placeholder=\"your-client-id\"\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"clientSecret\">Client Secret</Label>\n                          <Input\n                            id=\"clientSecret\"\n                            type=\"password\"\n                            value={sharePointForm.clientSecret}\n                            onChange={(e) => setSharePointForm({...sharePointForm, clientSecret: e.target.value})}\n                            placeholder=\"your-client-secret\"\n                          />\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            onClick={testSharePointConnection}\n                            disabled={connectionStatus === 'testing' || !sharePointForm.tenantId || !sharePointForm.clientId || !sharePointForm.clientSecret}\n                            variant=\"outline\"\n                          >\n                            {connectionStatus === 'testing' ? (\n                              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                            ) : (\n                              <CheckCircle className=\"h-4 w-4 mr-2\" />\n                            )}\n                            Test Connection\n                          </Button>\n                          {connectionStatus === 'connected' && (\n                            <Button onClick={fetchSharePointSites} variant=\"outline\">\n                              Load Sites\n                            </Button>\n                          )}\n                        </div>\n                        \n                        {sharepointSites.length > 0 && (\n                          <div>\n                            <Label htmlFor=\"siteSelect\">Select SharePoint Site</Label>\n                            <Select \n                              value={sharePointForm.siteId} \n                              onValueChange={(value) => {\n                                setSharePointForm({...sharePointForm, siteId: value});\n                                fetchSharePointLists(value);\n                              }}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Choose a site\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {sharepointSites.map((site) => (\n                                  <SelectItem key={site.id} value={site.id}>\n                                    {site.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        )}\n                        \n                        {sharepointLists.length > 0 && (\n                          <div>\n                            <Label htmlFor=\"listSelect\">Select SharePoint List</Label>\n                            <Select \n                              value={sharePointForm.listId} \n                              onValueChange={(value) => {\n                                const selectedList = sharepointLists.find(l => l.id === value);\n                                setSharePointForm({\n                                  ...sharePointForm, \n                                  listId: value,\n                                  listName: selectedList?.displayName || ''\n                                });\n                                fetchSharePointColumns(sharePointForm.siteId, value);\n                              }}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Choose a list\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {sharepointLists.map((list) => (\n                                  <SelectItem key={list.id} value={list.id}>\n                                    {list.displayName}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        )}\n                        \n                        {sharepointColumns.length > 0 && (\n                          <div>\n                            <Label>Column Mapping</Label>\n                            <div className=\"space-y-2 max-h-48 overflow-y-auto border rounded p-3\">\n                              {['name', 'address', 'city', 'state', 'zipCode', 'phone', 'email', 'website', 'hours', 'description', 'latitude', 'longitude'].map((field) => (\n                                <div key={field} className=\"flex items-center justify-between\">\n                                  <span className=\"text-sm font-medium\">{field} {['name', 'address', 'city', 'state', 'zipCode'].includes(field) && <span className=\"text-red-500\">*</span>}</span>\n                                  <Select\n                                    value={columnMapping[field] || ''}\n                                    onValueChange={(value) => setColumnMapping({...columnMapping, [field]: value})}\n                                  >\n                                    <SelectTrigger className=\"w-40\">\n                                      <SelectValue placeholder=\"Select column\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"none\">None</SelectItem>\n                                      {sharepointColumns.map((col) => (\n                                        <SelectItem key={col.name} value={col.name}>\n                                          {col.displayName || col.name}\n                                        </SelectItem>\n                                      ))}\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                        \n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"outline\" onClick={() => setShowSharePointDialog(false)}>\n                            Cancel\n                          </Button>\n                          <Button \n                            onClick={saveSharePointSettings}\n                            disabled={!sharePointForm.listId || !columnMapping.name}\n                          >\n                            Save Configuration\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Download className=\"h-5 w-5 mr-2\" />\n                  Google Sheets\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Sync data from Google Sheets with automatic updates.\n                </p>\n                <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-connect-sheets\">\n                  <i className=\"fab fa-google mr-2\"></i>\n                  Connect Sheets\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Upload className=\"h-5 w-5 mr-2\" />\n                  CSV Upload\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Upload pantry data from CSV files. Supported columns: name, address, city, state, zip, phone, email, hours, access_type, description, latitude, longitude.\n                </p>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileUpload}\n                  className=\"hidden\"\n                  data-testid=\"input-csv-file\"\n                />\n                <Button \n                  className=\"w-full\" \n                  variant=\"outline\" \n                  onClick={triggerFileUpload}\n                  disabled={uploadStatus === 'uploading'}\n                  data-testid=\"button-upload-csv\"\n                >\n                  {uploadStatus === 'uploading' ? (\n                    <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                  )}\n                  {uploadStatus === 'uploading' ? 'Uploading...' : 'Upload CSV'}\n                </Button>\n                \n                {uploadStatus === 'success' && uploadResults && (\n                  <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                    <div className=\"flex items-center mb-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                      <span className=\"text-sm font-medium text-green-800\">Upload Successful</span>\n                    </div>\n                    <p className=\"text-sm text-green-700\">\n                      {uploadResults.successCount} pantries imported\n                      {uploadResults.errorCount > 0 && `, ${uploadResults.errorCount} errors`}\n                    </p>\n                    {uploadResults.errors && uploadResults.errors.length > 0 && (\n                      <details className=\"mt-2\">\n                        <summary className=\"text-sm text-green-700 cursor-pointer\">View Errors</summary>\n                        <ul className=\"mt-1 text-xs text-green-600\">\n                          {uploadResults.errors.map((error: string, index: number) => (\n                            <li key={index}>• {error}</li>\n                          ))}\n                        </ul>\n                      </details>\n                    )}\n                  </div>\n                )}\n                \n                {uploadStatus === 'error' && (\n                  <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                    <div className=\"flex items-center\">\n                      <AlertCircle className=\"h-4 w-4 text-red-600 mr-2\" />\n                      <span className=\"text-sm font-medium text-red-800\">Upload Failed</span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Download className=\"h-5 w-5 mr-2\" />\n                Data Export & Backup\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Export your current pantry data as a CSV backup before syncing with SharePoint.\n              </p>\n              <Button \n                className=\"w-full\" \n                variant=\"outline\" \n                onClick={handleExportData}\n                data-testid=\"button-export-csv\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export Current Data\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Sync Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium text-foreground\">Last Synchronization</p>\n                  <p className=\"text-sm text-muted-foreground\">No recent sync available</p>\n                </div>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-sync-now\">\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                  Sync Now\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"pantries\" className=\"space-y-6\">\n          <PantryManagement />\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>User Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoadingUsers ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Loading users...</p>\n                </div>\n              ) : users.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No users found.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {users.map((user) => (\n                    <div key={user.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"flex items-center space-x-2\">\n                            <h3 className=\"font-medium\">\n                              {user.firstName || user.lastName \n                                ? `${user.firstName || ''} ${user.lastName || ''}`.trim()\n                                : user.email || 'Unnamed User'\n                              }\n                            </h3>\n                            <Badge variant={user.status === 'approved' ? 'default' : user.status === 'pending' ? 'secondary' : 'destructive'}>\n                              {user.status}\n                            </Badge>\n                            <Badge variant={user.role === 'super_admin' ? 'default' : user.role === 'admin' ? 'secondary' : 'outline'}>\n                              {user.role}\n                            </Badge>\n                          </div>\n                          {user.email && (\n                            <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                          )}\n                          {user.createdAt && (\n                            <p className=\"text-xs text-muted-foreground\">\n                              Joined: {new Date(user.createdAt).toLocaleDateString()}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Select\n                            onValueChange={(status) => updateUserStatusMutation.mutate({ userId: user.id, status })}\n                            defaultValue={user.status || 'pending'}\n                            data-testid={`select-status-${user.id}`}\n                          >\n                            <SelectTrigger className=\"w-32\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"pending\">Pending</SelectItem>\n                              <SelectItem value=\"approved\">Approved</SelectItem>\n                              <SelectItem value=\"rejected\">Rejected</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <Select\n                            onValueChange={(role) => updateUserRoleMutation.mutate({ userId: user.id, role })}\n                            defaultValue={user.role || 'user'}\n                            data-testid={`select-role-${user.id}`}\n                          >\n                            <SelectTrigger className=\"w-32\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"user\">User</SelectItem>\n                              <SelectItem value=\"admin\">Admin</SelectItem>\n                              <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n// Pantry Management Component\nfunction PantryManagement() {\n  const { toast } = useToast();\n  const [editingPantry, setEditingPantry] = useState<string | null>(null);\n  const [showDeleteAll, setShowDeleteAll] = useState(false);\n\n  // Fetch pantries\n  const { data: pantries, isLoading } = useQuery<any[]>({\n    queryKey: ['/api/pantries'],\n    retry: false,\n  });\n\n  // Delete pantry mutation\n  const deletePantryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/pantries/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pantries'] });\n      toast({\n        title: \"Pantry Deleted\",\n        description: \"The pantry has been removed successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Delete Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete all pantries mutation\n  const deleteAllMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('DELETE', '/api/pantries');\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pantries'] });\n      setShowDeleteAll(false);\n      toast({\n        title: \"All Pantries Deleted\",\n        description: `Successfully removed ${data.count} pantries.`,\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Bulk Delete Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Loading Pantries...</CardTitle>\n        </CardHeader>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Pantry Management</CardTitle>\n          <div className=\"space-x-2\">\n            <Button\n              variant=\"destructive\"\n              onClick={() => setShowDeleteAll(true)}\n              disabled={!pantries || !Array.isArray(pantries) || pantries.length === 0}\n              data-testid=\"button-delete-all-pantries\"\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Delete All ({Array.isArray(pantries) ? pantries.length : 0})\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {!pantries || !Array.isArray(pantries) || pantries.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <p>No pantries found. Upload a CSV file to get started.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {Array.isArray(pantries) && pantries.map((pantry: any) => (\n                <div key={pantry.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`pantry-item-${pantry.id}`}>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\" data-testid={`text-pantry-name-${pantry.id}`}>{pantry.name}</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {pantry.address}, {pantry.city}, {pantry.state} {pantry.zipCode}\n                    </p>\n                    {pantry.phone && (\n                      <p className=\"text-sm text-muted-foreground\">{pantry.phone}</p>\n                    )}\n                    {pantry.hours && (\n                      <p className=\"text-sm text-muted-foreground\">Hours: {pantry.hours}</p>\n                    )}\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setEditingPantry(pantry.id)}\n                      data-testid={`button-edit-${pantry.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => deletePantryMutation.mutate(pantry.id)}\n                      disabled={deletePantryMutation.isPending}\n                      data-testid={`button-delete-${pantry.id}`}\n                    >\n                      {deletePantryMutation.isPending ? (\n                        <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        <Trash2 className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Delete All Confirmation Dialog */}\n      {showDeleteAll && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg max-w-md mx-4\">\n            <h3 className=\"text-lg font-semibold mb-4\">Delete All Pantries</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Are you sure you want to delete all {Array.isArray(pantries) ? pantries.length : 0} pantries? This action cannot be undone.\n            </p>\n            <div className=\"flex space-x-4\">\n              <Button\n                variant=\"destructive\"\n                onClick={() => deleteAllMutation.mutate()}\n                disabled={deleteAllMutation.isPending}\n                data-testid=\"button-confirm-delete-all\"\n              >\n                {deleteAllMutation.isPending ? (\n                  <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                )}\n                Delete All\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowDeleteAll(false)}\n                disabled={deleteAllMutation.isPending}\n                data-testid=\"button-cancel-delete-all\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Edit Pantry Modal placeholder */}\n      {editingPantry && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg max-w-2xl mx-4 w-full\">\n            <h3 className=\"text-lg font-semibold mb-4\">Edit Pantry</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Edit functionality coming soon! For now, you can delete and re-import pantries.\n            </p>\n            <Button onClick={() => setEditingPantry(null)} data-testid=\"button-close-edit\">\n              Close\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":55435},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { MapPin, List, Settings, LogOut, Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\n\ninterface HeaderProps {\n  onToggleView?: () => void;\n  currentView?: 'map' | 'list';\n}\n\nexport default function Header({ onToggleView, currentView = 'map' }: HeaderProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { isAuthenticated } = useAuth();\n  \n  // Fetch admin settings for logo and organization name\n  const { data: adminSettings } = useQuery({\n    queryKey: ['/api/admin/settings'],\n  });\n\n  const handleLogout = () => {\n    window.location.href = '/api/logout';\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-4 hover:opacity-80 transition-opacity\">\n            {adminSettings?.logoUrl ? (\n              <img \n                src={adminSettings.logoUrl} \n                alt=\"Organization Logo\"\n                className=\"h-10 w-auto object-contain\"\n                onError={(e) => {\n                  // Fallback to icon if image fails to load\n                  e.currentTarget.style.display = 'none';\n                  e.currentTarget.nextElementSibling?.classList.remove('hidden');\n                }}\n              />\n            ) : null}\n            <MapPin className={`text-primary text-2xl ${adminSettings?.logoUrl ? 'hidden' : ''}`} />\n            <div>\n              <h1 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-app-title\">\n                Find a Pantry\n              </h1>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-org-name\">\n                {adminSettings?.organizationName || \"Second Harvest Food Bank of the Lehigh Valley\"}\n              </p>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            {onToggleView && (\n              <Button\n                variant=\"ghost\"\n                onClick={onToggleView}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-toggle-view\"\n              >\n                <List className=\"h-4 w-4\" />\n                <span>{currentView === 'map' ? 'List View' : 'Map View'}</span>\n              </Button>\n            )}\n            \n            {isAuthenticated ? (\n              <>\n                <Button asChild variant=\"ghost\" data-testid=\"button-admin-dashboard\">\n                  <Link href=\"/admin\" className=\"flex items-center space-x-2\">\n                    <Settings className=\"h-4 w-4\" />\n                    <span>Admin</span>\n                  </Link>\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  onClick={handleLogout}\n                  className=\"flex items-center space-x-2\"\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"h-4 w-4\" />\n                  <span>Logout</span>\n                </Button>\n              </>\n            ) : (\n              <Button\n                onClick={() => window.location.href = '/api/login'}\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                data-testid=\"button-login\"\n              >\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Admin Login\n              </Button>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"md:hidden\"\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            data-testid=\"button-mobile-menu\"\n          >\n            {isMobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n          </Button>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden border-t border-border py-4\">\n            <div className=\"space-y-2\">\n              {onToggleView && (\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => {\n                    onToggleView();\n                    setIsMobileMenuOpen(false);\n                  }}\n                  className=\"w-full justify-start\"\n                  data-testid=\"button-mobile-toggle-view\"\n                >\n                  <List className=\"h-4 w-4 mr-2\" />\n                  {currentView === 'map' ? 'List View' : 'Map View'}\n                </Button>\n              )}\n              \n              {isAuthenticated ? (\n                <>\n                  <Button asChild variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"button-mobile-admin\">\n                    <Link href=\"/admin\" onClick={() => setIsMobileMenuOpen(false)}>\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Admin Dashboard\n                    </Link>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => {\n                      handleLogout();\n                      setIsMobileMenuOpen(false);\n                    }}\n                    className=\"w-full justify-start\"\n                    data-testid=\"button-mobile-logout\"\n                  >\n                    <LogOut className=\"h-4 w-4 mr-2\" />\n                    Logout\n                  </Button>\n                </>\n              ) : (\n                <Button\n                  onClick={() => {\n                    window.location.href = '/api/login';\n                    setIsMobileMenuOpen(false);\n                  }}\n                  className=\"w-full justify-start bg-primary text-primary-foreground hover:bg-primary/90\"\n                  data-testid=\"button-mobile-login\"\n                >\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Admin Login\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":6290},"client/src/components/pantry/pantry-card.tsx":{"content":"import { Phone, Navigation, MapPin } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Pantry } from \"@shared/schema\";\n\ninterface PantryCardProps {\n  pantry: Pantry;\n  onClick: () => void;\n  onShowOnMap?: () => void;\n  distance?: number;\n  isSelected?: boolean;\n}\n\nexport default function PantryCard({ pantry, onClick, onShowOnMap, distance, isSelected }: PantryCardProps) {\n  const getAccessTypeBadge = (accessType: string | null) => {\n    switch (accessType) {\n      case 'walk-in':\n        return <Badge variant=\"default\" className=\"bg-primary/10 text-primary\">Walk-in</Badge>;\n      case 'appointment':\n        return <Badge variant=\"secondary\" className=\"bg-secondary/10 text-secondary\">By Appointment</Badge>;\n      case 'mobile':\n        return <Badge variant=\"outline\" className=\"border-accent text-accent-foreground\">Mobile</Badge>;\n      default:\n        return <Badge variant=\"outline\">Contact for Info</Badge>;\n    }\n  };\n\n  const handleDirections = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    const address = `${pantry.address}, ${pantry.city}, ${pantry.state} ${pantry.zipCode}`;\n    const encodedAddress = encodeURIComponent(address);\n    window.open(`https://www.google.com/maps/dir/?api=1&destination=${encodedAddress}`, '_blank');\n  };\n\n  const handleCall = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (pantry.phone) {\n      window.location.href = `tel:${pantry.phone}`;\n    }\n  };\n\n  const handleShowOnMap = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onShowOnMap) {\n      onShowOnMap();\n    }\n  };\n\n  return (\n    <Card \n      className={`p-4 hover:shadow-md transition-shadow cursor-pointer hover:bg-accent/5 ${isSelected ? 'ring-2 ring-primary bg-primary/5' : ''}`}\n      onClick={onClick}\n      data-testid={`card-pantry-${pantry.id}`}\n    >\n      <div className=\"flex justify-between items-start mb-2\">\n        <h3 className=\"font-semibold text-foreground line-clamp-2 flex-1 mr-2\" data-testid={`text-pantry-name-${pantry.id}`}>\n          {pantry.name}\n        </h3>\n        {distance !== undefined && (\n          <span className=\"text-xs bg-accent text-accent-foreground px-2 py-1 rounded-full whitespace-nowrap\">\n            {distance.toFixed(1)} mi\n          </span>\n        )}\n      </div>\n      \n      <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`text-pantry-address-${pantry.id}`}>\n        {pantry.address}<br />\n        {pantry.city}, {pantry.state} {pantry.zipCode}\n      </p>\n      \n      {pantry.phone && (\n        <div className=\"flex items-center text-sm text-muted-foreground mb-2\">\n          <Phone className=\"h-4 w-4 mr-2\" />\n          <span data-testid={`text-pantry-phone-${pantry.id}`}>{pantry.phone}</span>\n        </div>\n      )}\n      \n      {pantry.hours && (\n        <p className=\"text-sm text-muted-foreground mb-3\" data-testid={`text-pantry-hours-${pantry.id}`}>\n          {pantry.hours}\n        </p>\n      )}\n      \n      <div className=\"flex flex-col gap-3\">\n        <div className=\"flex items-center justify-between\">\n          {getAccessTypeBadge(pantry.accessType)}\n        </div>\n        <div className=\"flex gap-1 flex-wrap\">\n          {onShowOnMap && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleShowOnMap}\n              className=\"text-primary hover:text-primary/80 text-xs px-2 py-1 h-auto\"\n              data-testid={`button-show-on-map-${pantry.id}`}\n            >\n              <MapPin className=\"h-3 w-3 mr-1\" />\n              Show on Map\n            </Button>\n          )}\n          {pantry.phone && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleCall}\n              className=\"text-primary hover:text-primary/80 text-xs px-2 py-1 h-auto\"\n              data-testid={`button-call-${pantry.id}`}\n            >\n              <Phone className=\"h-3 w-3 mr-1\" />\n              Call\n            </Button>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleDirections}\n            className=\"text-primary hover:text-primary/80 text-xs px-2 py-1 h-auto\"\n            data-testid={`button-directions-${pantry.id}`}\n          >\n            <Navigation className=\"h-3 w-3 mr-1\" />\n            Directions\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4480},"client/src/components/pantry/pantry-detail-modal.tsx":{"content":"import { X, Phone, Mail, Navigation, Share, Check, Clock, MapPin } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Pantry } from \"@shared/schema\";\n\ninterface PantryDetailModalProps {\n  pantry: Pantry;\n  onClose: () => void;\n}\n\nexport default function PantryDetailModal({ pantry, onClose }: PantryDetailModalProps) {\n  const handleDirections = () => {\n    const address = `${pantry.address}, ${pantry.city}, ${pantry.state} ${pantry.zipCode}`;\n    const encodedAddress = encodeURIComponent(address);\n    window.open(`https://www.google.com/maps/dir/?api=1&destination=${encodedAddress}`, '_blank');\n  };\n\n  const handleCall = () => {\n    if (pantry.phone) {\n      window.location.href = `tel:${pantry.phone}`;\n    }\n  };\n\n  const handleEmail = () => {\n    if (pantry.email) {\n      window.location.href = `mailto:${pantry.email}`;\n    }\n  };\n\n  const handleShare = async () => {\n    const address = `${pantry.address}, ${pantry.city}, ${pantry.state} ${pantry.zipCode}`;\n    const shareData = {\n      title: pantry.name,\n      text: `${pantry.name} - Food pantry located at ${address}. ${pantry.phone ? `Phone: ${pantry.phone}.` : ''} Find more food pantries at ${window.location.origin}`,\n      url: window.location.origin,\n    };\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n      } catch (error) {\n        // Fallback to copying to clipboard\n        copyToClipboard();\n      }\n    } else {\n      copyToClipboard();\n    }\n  };\n\n  const copyToClipboard = () => {\n    const address = `${pantry.address}, ${pantry.city}, ${pantry.state} ${pantry.zipCode}`;\n    const text = `${pantry.name} - Food pantry located at ${address}. ${pantry.phone ? `Phone: ${pantry.phone}.` : ''} Find more food pantries at ${window.location.origin}`;\n    navigator.clipboard.writeText(text);\n  };\n\n  const getAccessTypeInfo = () => {\n    switch (pantry.accessType) {\n      case 'walk-in':\n        return {\n          badge: <Badge className=\"bg-primary/10 text-primary\">Walk-in Welcome</Badge>,\n          description: \"No appointment necessary - walk-in during operating hours.\"\n        };\n      case 'appointment':\n        return {\n          badge: <Badge className=\"bg-secondary/10 text-secondary\">By Appointment Only</Badge>,\n          description: \"Please call ahead to schedule your visit.\"\n        };\n      case 'mobile':\n        return {\n          badge: <Badge variant=\"outline\" className=\"border-accent text-accent-foreground\">Mobile Pantry</Badge>,\n          description: \"Mobile food distribution - check schedule for locations and times.\"\n        };\n      default:\n        return {\n          badge: <Badge variant=\"outline\">Contact for Information</Badge>,\n          description: \"Please contact the pantry for access information.\"\n        };\n    }\n  };\n\n  const accessInfo = getAccessTypeInfo();\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-[9999]\" onClick={onClose}>\n      <div \n        className=\"bg-card rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\"\n        onClick={(e) => e.stopPropagation()}\n        data-testid=\"modal-pantry-detail\"\n      >\n        <div className=\"p-6\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex-1 mr-4\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"text-pantry-modal-name\">\n                {pantry.name}\n              </h2>\n              <div className=\"flex items-start text-muted-foreground\">\n                <MapPin className=\"h-4 w-4 mr-2 mt-0.5 flex-shrink-0\" />\n                <p data-testid=\"text-pantry-modal-address\">\n                  {pantry.address}<br />\n                  {pantry.city}, {pantry.state} {pantry.zipCode}\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              className=\"text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-close-modal\"\n            >\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"font-semibold text-foreground mb-3\">Contact Information</h3>\n              <div className=\"space-y-3\">\n                {pantry.phone && (\n                  <div className=\"flex items-center\">\n                    <Phone className=\"text-muted-foreground h-4 w-4 mr-3\" />\n                    <span className=\"text-foreground\" data-testid=\"text-pantry-modal-phone\">\n                      {pantry.phone}\n                    </span>\n                  </div>\n                )}\n                {pantry.email && (\n                  <div className=\"flex items-center\">\n                    <Mail className=\"text-muted-foreground h-4 w-4 mr-3\" />\n                    <span className=\"text-foreground\" data-testid=\"text-pantry-modal-email\">\n                      {pantry.email}\n                    </span>\n                  </div>\n                )}\n              </div>\n              \n              <h3 className=\"font-semibold text-foreground mb-3 mt-6\">Hours & Availability</h3>\n              <div className=\"bg-muted rounded-lg p-4\">\n                <div className=\"flex items-center mb-2\">\n                  <Clock className=\"text-secondary h-4 w-4 mr-2\" />\n                  {accessInfo.badge}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {accessInfo.description}\n                </p>\n                {pantry.hours && (\n                  <div className=\"mt-2 pt-2 border-t border-border\">\n                    <p className=\"text-sm font-medium text-foreground\">Hours:</p>\n                    <p className=\"text-sm text-muted-foreground\" data-testid=\"text-pantry-modal-hours\">\n                      {pantry.hours}\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              {pantry.services && pantry.services.length > 0 && (\n                <>\n                  <h3 className=\"font-semibold text-foreground mb-3\">Services</h3>\n                  <ul className=\"space-y-2 text-sm mb-6\">\n                    {pantry.services.map((service, index) => (\n                      <li key={index} className=\"flex items-center\">\n                        <Check className=\"text-primary h-4 w-4 mr-2 flex-shrink-0\" />\n                        <span>{service}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </>\n              )}\n              \n              {pantry.description && (\n                <>\n                  <h3 className=\"font-semibold text-foreground mb-3\">Additional Information</h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-pantry-modal-description\">\n                    {pantry.description}\n                  </p>\n                </>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex flex-wrap gap-3 mt-6 pt-6 border-t border-border\">\n            <Button \n              onClick={handleDirections}\n              variant=\"outline\"\n              data-testid=\"button-get-directions\"\n            >\n              <Navigation className=\"h-4 w-4 mr-2\" />\n              Get Directions\n            </Button>\n            {pantry.phone && (\n              <Button \n                onClick={handleCall}\n                className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n                data-testid=\"button-call-now\"\n              >\n                <Phone className=\"h-4 w-4 mr-2\" />\n                Call Now\n              </Button>\n            )}\n            {pantry.email && (\n              <Button \n                variant=\"outline\"\n                onClick={handleEmail}\n                data-testid=\"button-send-email\"\n              >\n                <Mail className=\"h-4 w-4 mr-2\" />\n                Email\n              </Button>\n            )}\n            <Button \n              variant=\"outline\"\n              onClick={handleShare}\n              data-testid=\"button-share\"\n            >\n              <Share className=\"h-4 w-4 mr-2\" />\n              Share\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8447},"client/src/components/search/search-sidebar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport PantryCard from \"@/components/pantry/pantry-card\";\nimport { Pantry } from \"@shared/schema\";\n\ninterface SearchSidebarProps {\n  pantries: Pantry[];\n  isLoading: boolean;\n  onPantrySelect: (pantry: Pantry) => void;\n  onShowOnMap: (pantry: Pantry) => void;\n  onSearch: (query: string, lat?: number, lng?: number) => void;\n  searchQuery: string;\n  selectedDistance: string;\n  onDistanceChange: (distance: string) => void;\n  selectedFilter: string;\n  onFilterChange: (filter: string) => void;\n  selectedPantryId?: string | null;\n  isMobile?: boolean;\n}\n\nexport default function SearchSidebar({\n  pantries,\n  isLoading,\n  onPantrySelect,\n  onShowOnMap,\n  onSearch,\n  searchQuery,\n  selectedDistance,\n  onDistanceChange,\n  selectedFilter,\n  onFilterChange,\n  selectedPantryId,\n  isMobile = false,\n}: SearchSidebarProps) {\n  const [inputValue, setInputValue] = useState(searchQuery);\n\n  // Update input value when searchQuery changes to prevent disappearing\n  useEffect(() => {\n    setInputValue(searchQuery);\n  }, [searchQuery]);\n\n  const handleSearchSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (inputValue.trim()) {\n      // Try to geocode the search query using our backend endpoint\n      try {\n        const response = await fetch(`/api/geocode?q=${encodeURIComponent(inputValue)}`);\n        const results = await response.json();\n        \n        if (Array.isArray(results) && results.length > 0 && results[0].lat && results[0].lon) {\n          const lat = parseFloat(results[0].lat);\n          const lng = parseFloat(results[0].lon);\n          if (!isNaN(lat) && !isNaN(lng)) {\n            onSearch(inputValue, lat, lng);\n            return;\n          }\n        }\n        \n        // No valid geocoding results, fall back to text search\n        onSearch(inputValue);\n      } catch (error) {\n        // Silently fall back to text-only search\n        onSearch(inputValue);\n      }\n    } else {\n      onSearch('');\n    }\n  };\n\n  const filteredPantries = pantries.filter(pantry => {\n    if (selectedFilter === 'all') return true;\n    if (selectedFilter === 'walk-in') return pantry.accessType === 'walk-in';\n    if (selectedFilter === 'appointment') return pantry.accessType === 'appointment';\n    if (selectedFilter === 'mobile') return pantry.accessType === 'mobile';\n    return true;\n  });\n\n  if (isMobile) {\n    return (\n      <div className=\"bg-white/95 backdrop-blur-sm rounded-lg shadow-xl border border-gray-200\">\n        {/* Compact mobile search form */}\n        <div className=\"p-4\">\n          <form onSubmit={handleSearchSubmit} className=\"space-y-3\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n              <Input\n                id=\"search-location-mobile\"\n                type=\"text\"\n                placeholder=\"Search address or zip code\"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                className=\"pl-10 h-12 text-base bg-white border-gray-300 focus:border-primary focus:ring-primary\"\n                data-testid=\"input-search-location-mobile\"\n              />\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Select value={selectedDistance} onValueChange={onDistanceChange}>\n                <SelectTrigger className=\"flex-1 h-10 bg-white border-gray-300\" data-testid=\"select-distance-mobile\">\n                  <SelectValue placeholder=\"Distance\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"5\">5 miles</SelectItem>\n                  <SelectItem value=\"10\">10 miles</SelectItem>\n                  <SelectItem value=\"25\">25 miles</SelectItem>\n                  <SelectItem value=\"50\">50 miles</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Select value={selectedFilter} onValueChange={onFilterChange}>\n                <SelectTrigger className=\"flex-1 h-10 bg-white border-gray-300\" data-testid=\"select-filter-mobile\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Pantries</SelectItem>\n                  <SelectItem value=\"walk-in\">Walk-in</SelectItem>\n                  <SelectItem value=\"appointment\">By Appointment</SelectItem>\n                  <SelectItem value=\"mobile\">Mobile Pantry</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </form>\n        </div>\n        \n        {/* Mobile results count */}\n        {searchQuery && (\n          <div className=\"px-4 pb-3 border-t border-gray-200 bg-gray-50/80\">\n            <p className=\"text-sm text-gray-600 pt-2\">\n              {isLoading ? \"Searching...\" : `${filteredPantries.length} found`}\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full md:w-96 bg-card border-r border-border overflow-y-auto\">\n      {/* Search Controls */}\n      <div className=\"p-6 border-b border-border\">\n        <form onSubmit={handleSearchSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"search-location\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Search Location\n            </Label>\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n              <Input\n                id=\"search-location\"\n                type=\"text\"\n                placeholder=\"Enter address or zip code\"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-location\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <Label htmlFor=\"distance-select\" className=\"block text-sm font-medium text-foreground mb-2\">\n                Distance\n              </Label>\n              <Select value={selectedDistance} onValueChange={onDistanceChange}>\n                <SelectTrigger id=\"distance-select\" data-testid=\"select-distance\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"5\">5 miles</SelectItem>\n                  <SelectItem value=\"10\">10 miles</SelectItem>\n                  <SelectItem value=\"25\">25 miles</SelectItem>\n                  <SelectItem value=\"50\">50 miles</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"filter-select\" className=\"block text-sm font-medium text-foreground mb-2\">\n                Filter\n              </Label>\n              <Select value={selectedFilter} onValueChange={onFilterChange}>\n                <SelectTrigger id=\"filter-select\" data-testid=\"select-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Pantries</SelectItem>\n                  <SelectItem value=\"walk-in\">Walk-in</SelectItem>\n                  <SelectItem value=\"appointment\">By Appointment</SelectItem>\n                  <SelectItem value=\"mobile\">Mobile Pantries</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </form>\n      </div>\n\n      {/* Pantry List */}\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-semibold text-foreground\">\n            {searchQuery ? 'Search Results' : 'Nearby Pantries'}\n          </h2>\n          <span className=\"text-sm text-muted-foreground\" data-testid=\"text-pantry-count\">\n            {isLoading ? '...' : `${filteredPantries.length} found`}\n          </span>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {isLoading ? (\n            // Loading skeletons\n            Array.from({ length: 3 }).map((_, index) => (\n              <div key={index} className=\"border border-border rounded-lg p-4\">\n                <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-4 w-2/3 mb-2\" />\n                <div className=\"flex justify-between items-center\">\n                  <Skeleton className=\"h-6 w-20\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                </div>\n              </div>\n            ))\n          ) : filteredPantries.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground mb-2\">No pantries found</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Try adjusting your search criteria or expanding the distance range.\n              </p>\n            </div>\n          ) : (\n            filteredPantries.map((pantry) => (\n              <PantryCard\n                key={pantry.id}\n                pantry={pantry}\n                onClick={() => onPantrySelect(pantry)}\n                onShowOnMap={() => onShowOnMap(pantry)}\n                isSelected={pantry.id === selectedPantryId}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9774},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/map/interactive-map.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, useMap, useMapEvents } from \"react-leaflet\";\nimport { Icon, LatLngBounds, LatLngTuple } from \"leaflet\";\nimport { type Pantry } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, Navigation } from \"lucide-react\";\nimport \"leaflet/dist/leaflet.css\";\n\n// Configure default markers - Fix for react-leaflet default icons\nconst DefaultIcon = new Icon({\n  iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n  iconRetinaUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\",\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  shadowSize: [41, 41]\n});\n\n// User location marker icon\nconst UserLocationIcon = new Icon({\n  iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n  iconRetinaUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\",\n  iconSize: [30, 48],\n  iconAnchor: [15, 48],\n  popupAnchor: [1, -42],\n  shadowSize: [48, 48],\n  className: 'user-location-marker'\n});\n\n// Component to handle map click events\nfunction MapEventHandler({ onMapReset }: { onMapReset?: () => void }) {\n  useMapEvents({\n    click: () => {\n      if (onMapReset) {\n        onMapReset();\n      }\n    }\n  });\n  return null;\n}\n\n// Component to handle map center changes\ninterface MapControllerProps {\n  center: [number, number];\n  pantries: Pantry[];\n  selectedPantry?: Pantry | null;\n}\n\nfunction MapController({ center, pantries, selectedPantry }: MapControllerProps) {\n  const map = useMap();\n  const [lastCenter, setLastCenter] = useState<[number, number]>(center);\n  \n  useEffect(() => {\n    // Only update if center actually changed\n    const hasChanged = center[0] !== lastCenter[0] || center[1] !== lastCenter[1];\n    \n    if (hasChanged) {\n      setLastCenter(center);\n      \n      const currentZoom = map.getZoom();\n      \n      // If already zoomed in (close view), just instantly switch to new location\n      if (currentZoom >= 14) {\n        map.setView(center, 16, { animate: false });\n      } else {\n        // If zoomed out, first set position, then animate zoom for more reliable animation\n        map.setView(center, currentZoom, { animate: false });\n        setTimeout(() => {\n          map.flyTo(center, 17, {\n            animate: true,\n            duration: 2\n          });\n        }, 50);\n      }\n    }\n  }, [map, center, lastCenter]);\n\n  useEffect(() => {\n    // Only fit all pantries in view on initial load, not when switching between pantries\n    const isInitialLoad = pantries.length > 0 && lastCenter[0] === 40.6259 && lastCenter[1] === -75.3697;\n    \n    if (isInitialLoad && !selectedPantry) {\n      const validPantries = pantries.filter(p => p.latitude && p.longitude);\n      if (validPantries.length > 0) {\n        const bounds = new LatLngBounds(\n          validPantries.map(p => [parseFloat(p.latitude!), parseFloat(p.longitude!)] as LatLngTuple)\n        );\n        map.fitBounds(bounds, { padding: [20, 20] });\n      }\n    }\n  }, [map, pantries, selectedPantry, lastCenter]);\n\n  return null;\n}\n\ninterface InteractiveMapProps {\n  pantries: Pantry[];\n  center: [number, number];\n  selectedPantry?: Pantry | null;\n  onPantrySelect: (pantry: Pantry) => void;\n  onLocationUpdate?: (lat: number, lng: number) => void;\n  onMapReset?: () => void;\n  className?: string;\n}\n\nexport default function InteractiveMap({ \n  pantries, \n  center, \n  selectedPantry,\n  onPantrySelect,\n  onLocationUpdate,\n  onMapReset,\n  className = \"h-full w-full\"\n}: InteractiveMapProps) {\n  const mapRef = useRef(null);\n  const [userLocation, setUserLocation] = useState<[number, number] | null>(null);\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n  const [locationError, setLocationError] = useState<string | null>(null);\n\n  const resetMapView = () => {\n    // Reset map to show all pantries and clear selection\n    if (onMapReset) {\n      onMapReset();\n    }\n    // The MapController will handle fitting bounds when selection is cleared\n  };\n\n  // Filter pantries that have valid coordinates\n  const validPantries = pantries.filter(pantry => \n    pantry.latitude && \n    pantry.longitude && \n    !isNaN(parseFloat(pantry.latitude)) && \n    !isNaN(parseFloat(pantry.longitude))\n  );\n\n  const formatHours = (hours: string | null) => {\n    if (!hours) return \"Hours not available\";\n    return hours;\n  };\n\n  const formatServices = (services: string[] | null) => {\n    if (!services || services.length === 0) return \"Services not specified\";\n    return services.join(\", \");\n  };\n\n  // Get user's current location\n  const getCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      setLocationError(\"Geolocation is not supported by this browser\");\n      return;\n    }\n\n    setIsGettingLocation(true);\n    setLocationError(null);\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        const newLocation: [number, number] = [latitude, longitude];\n        setUserLocation(newLocation);\n        setIsGettingLocation(false);\n        \n        // Update parent component with new location\n        if (onLocationUpdate) {\n          onLocationUpdate(latitude, longitude);\n        }\n      },\n      (error) => {\n        setIsGettingLocation(false);\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            setLocationError(\"Location access denied. Please enable location services.\");\n            break;\n          case error.POSITION_UNAVAILABLE:\n            setLocationError(\"Location information unavailable.\");\n            break;\n          case error.TIMEOUT:\n            setLocationError(\"Location request timed out.\");\n            break;\n          default:\n            setLocationError(\"An unknown error occurred.\");\n            break;\n        }\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 300000 // 5 minutes\n      }\n    );\n  };\n\n  return (\n    <div className={className} data-testid=\"interactive-map\">\n      {/* Map Control Buttons */}\n      <div className=\"absolute top-4 right-4 z-[1000] flex flex-col gap-2\">\n        <Button\n          onClick={getCurrentLocation}\n          disabled={isGettingLocation}\n          size=\"sm\"\n          className=\"bg-white hover:bg-gray-50 text-gray-800 border shadow-md\"\n          data-testid=\"button-get-location\"\n        >\n          {isGettingLocation ? (\n            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n          ) : (\n            <Navigation className=\"h-4 w-4\" />\n          )}\n          {isGettingLocation ? \"Getting location...\" : \"Find me\"}\n        </Button>\n        \n        <Button\n          onClick={resetMapView}\n          size=\"sm\"\n          variant=\"outline\"\n          className=\"bg-white hover:bg-gray-50 text-gray-800 border shadow-md\"\n          data-testid=\"button-reset-view\"\n        >\n          <MapPin className=\"h-4 w-4\" />\n          Reset View\n        </Button>\n        \n        {locationError && (\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-3 py-2 rounded text-xs max-w-48\">\n            {locationError}\n          </div>\n        )}\n      </div>\n\n      <MapContainer\n        ref={mapRef}\n        center={center}\n        zoom={10}\n        style={{ height: \"100%\", width: \"100%\" }}\n        scrollWheelZoom={true}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n        <MapController center={center} pantries={validPantries} selectedPantry={selectedPantry} />\n        <MapEventHandler onMapReset={onMapReset} />\n        \n        {/* User location marker */}\n        {userLocation && (\n          <Marker\n            position={userLocation}\n            icon={UserLocationIcon}\n          >\n            <Popup>\n              <div className=\"text-center\">\n                <div className=\"flex items-center gap-2 justify-center mb-2\">\n                  <MapPin className=\"h-4 w-4 text-blue-600\" />\n                  <strong>Your Location</strong>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  You are here\n                </p>\n              </div>\n            </Popup>\n          </Marker>\n        )}\n        \n        {validPantries.map((pantry) => (\n          <Marker\n            key={pantry.id}\n            position={[parseFloat(pantry.latitude!), parseFloat(pantry.longitude!)]}\n            icon={DefaultIcon}\n            eventHandlers={{\n              click: () => {\n                onPantrySelect(pantry);\n              }\n            }}\n          />\n        ))}\n      </MapContainer>\n    </div>\n  );\n}","size_bytes":9094},"azure-sharepoint-setup-guide.md":{"content":"# SharePoint Integration Setup Guide for M365 Administrators\n\nThis guide provides step-by-step instructions for Microsoft 365 administrators to configure Azure Active Directory and SharePoint permissions for the Food Pantry Finder application.\n\n## Overview\n\nThe Food Pantry Finder application needs to connect to your SharePoint lists to automatically synchronize pantry data. This requires creating an Azure AD application registration with appropriate permissions to access SharePoint sites and lists.\n\n## Prerequisites\n\n- Global Administrator or Application Administrator role in Azure AD\n- SharePoint Administrator privileges\n- Access to the Microsoft 365 Admin Center and Azure Portal\n\n## Step 1: Create Azure AD Application Registration\n\n1. **Sign in to Azure Portal**\n   - Go to [portal.azure.com](https://portal.azure.com)\n   - Sign in with your M365 administrator account\n\n2. **Navigate to Azure Active Directory**\n   - In the left navigation, click \"Azure Active Directory\"\n   - Select \"App registrations\" from the left menu\n\n3. **Create New Application Registration**\n   - Click \"New registration\"\n   - Fill out the application details:\n     - **Name**: `Food Pantry Finder - SharePoint Integration`\n     - **Supported account types**: Select \"Accounts in this organizational directory only\"\n     - **Redirect URI**: Leave blank for now\n   - Click \"Register\"\n\n4. **Note Important Values**\n   After registration, copy these values (you'll need them for the application setup):\n   - **Application (client) ID**: Found on the Overview page\n   - **Directory (tenant) ID**: Found on the Overview page\n\n## Step 2: Configure API Permissions\n\n1. **Add Microsoft Graph Permissions**\n   - In your app registration, click \"API permissions\" in the left menu\n   - Click \"Add a permission\"\n   - Select \"Microsoft Graph\"\n   - Choose \"Application permissions\"\n   - Add the following permissions:\n     - `Sites.Read.All` - Read items in all site collections\n     - `Sites.ReadWrite.All` - Read and write items in all site collections\n     - `Directory.Read.All` - Read directory data\n\n2. **Grant Admin Consent**\n   - After adding permissions, click \"Grant admin consent for [Your Organization]\"\n   - Click \"Yes\" to confirm\n   - Verify all permissions show \"Granted for [Your Organization]\"\n\n## Step 3: Create Client Secret\n\n1. **Generate Client Secret**\n   - Click \"Certificates & secrets\" in the left menu\n   - Under \"Client secrets\", click \"New client secret\"\n   - Add a description: `Food Pantry Finder Integration`\n   - Choose expiration (recommend 24 months)\n   - Click \"Add\"\n\n2. **Copy Secret Value**\n   - **IMPORTANT**: Copy the secret value immediately - it won't be shown again\n   - Store this securely - you'll need it for application configuration\n\n## Step 4: SharePoint Site Configuration\n\n1. **Prepare Your SharePoint List**\n   - Ensure your pantry data is in a SharePoint list\n   - The list should contain columns for:\n     - Name (required)\n     - Address (required)  \n     - City (required)\n     - State (required)\n     - ZIP Code (required)\n     - Phone (optional)\n     - Email (optional)\n     - Website (optional)\n     - Hours (optional)\n     - Description (optional)\n     - Latitude (optional)\n     - Longitude (optional)\n\n2. **Note SharePoint Information**\n   - **Site URL**: The full URL of your SharePoint site\n   - **List Name**: The name of your pantry data list\n\n## Step 5: Application Configuration Values\n\nProvide the following information to your Food Pantry Finder application administrator:\n\n```\nTenant ID: [Directory ID from Step 1]\nClient ID: [Application ID from Step 1]\nClient Secret: [Secret value from Step 3]\nSharePoint Site URL: [Your SharePoint site URL]\nList Name: [Your pantry data list name]\n```\n\n## Security Considerations\n\n1. **Principle of Least Privilege**\n   - The application requests only the minimum permissions needed\n   - Regularly review and audit application access\n\n2. **Secret Management**\n   - Client secrets should be stored securely in the application\n   - Rotate secrets regularly (before expiration)\n   - Monitor secret usage in Azure AD logs\n\n3. **Access Monitoring**\n   - Review Azure AD sign-in logs regularly\n   - Monitor for any unusual access patterns\n   - Set up alerts for application access if needed\n\n## Troubleshooting\n\n### Common Issues\n\n1. **\"Insufficient privileges\" Error**\n   - Verify all required permissions are granted\n   - Ensure admin consent has been provided\n   - Check that the user account has proper SharePoint permissions\n\n2. **\"Invalid client\" Error**\n   - Verify the Client ID is correct\n   - Ensure the application is not disabled\n   - Check that the tenant ID matches your organization\n\n3. **\"Access denied\" to SharePoint**\n   - Verify Sites.Read.All permission is granted\n   - Check SharePoint site permissions\n   - Ensure the application can access the specific site and list\n\n### Testing Connection\n\nThe application includes a \"Test Connection\" feature that will verify:\n- Azure AD authentication is working\n- Required permissions are available\n- SharePoint site and list are accessible\n\n## Support\n\nFor technical support with this integration:\n1. Check the application's connection testing feature\n2. Review Azure AD audit logs for authentication issues\n3. Verify SharePoint permissions and list structure\n4. Contact your application support team with specific error messages\n\n## Security Review Checklist\n\nBefore deploying to production:\n- [ ] All required permissions are granted with minimal scope\n- [ ] Admin consent has been provided\n- [ ] Client secret is stored securely\n- [ ] Access monitoring is configured\n- [ ] SharePoint data contains only necessary information\n- [ ] Data classification and sensitivity labels are applied appropriately\n- [ ] Backup and disaster recovery procedures are in place\n\n---\n\n*This guide was created for the Food Pantry Finder SharePoint integration. Last updated: 2025*","size_bytes":5898},"server/services/exportService.ts":{"content":"import { Pantry } from \"@shared/schema\";\n\nexport class ExportService {\n  static generateCSV(pantries: Pantry[]): string {\n    if (pantries.length === 0) {\n      return 'name,address,city,state,zipCode,phone,email,website,hours,description,services,accessType,latitude,longitude,isActive,createdAt,updatedAt\\n';\n    }\n\n    // CSV headers\n    const headers = [\n      'id',\n      'name', \n      'address', \n      'city', \n      'state', \n      'zipCode', \n      'phone', \n      'email', \n      'website', \n      'hours', \n      'description', \n      'services',\n      'accessType', \n      'latitude', \n      'longitude', \n      'isActive',\n      'createdAt',\n      'updatedAt'\n    ];\n\n    // Helper function to escape CSV values\n    const escapeCSVValue = (value: any): string => {\n      if (value === null || value === undefined) {\n        return '';\n      }\n      \n      let stringValue = String(value);\n      \n      // Handle arrays (like services)\n      if (Array.isArray(value)) {\n        stringValue = value.join('; ');\n      }\n      \n      // Handle dates\n      if (value instanceof Date) {\n        stringValue = value.toISOString();\n      }\n      \n      // Escape quotes and wrap in quotes if contains comma, quote, or newline\n      if (stringValue.includes('\"')) {\n        stringValue = stringValue.replace(/\"/g, '\"\"');\n      }\n      \n      if (stringValue.includes(',') || stringValue.includes('\"') || stringValue.includes('\\n') || stringValue.includes('\\r')) {\n        stringValue = `\"${stringValue}\"`;\n      }\n      \n      return stringValue;\n    };\n\n    // Create CSV content\n    let csvContent = headers.join(',') + '\\n';\n    \n    for (const pantry of pantries) {\n      const row = headers.map(header => {\n        return escapeCSVValue(pantry[header as keyof Pantry]);\n      });\n      csvContent += row.join(',') + '\\n';\n    }\n\n    return csvContent;\n  }\n\n  static generateBackupCSV(pantries: Pantry[]): string {\n    // Generate a more comprehensive backup format that preserves all data\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);\n    const csvContent = this.generateCSV(pantries);\n    \n    // Add metadata header as comment\n    const metadataHeader = `# Food Pantry Data Backup\\n# Generated: ${new Date().toISOString()}\\n# Total Records: ${pantries.length}\\n# Format: Standard CSV with all fields\\n\\n`;\n    \n    return metadataHeader + csvContent;\n  }\n\n  static getExportFilename(type: 'backup' | 'export' = 'export'): string {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);\n    const prefix = type === 'backup' ? 'pantry-backup' : 'pantry-export';\n    return `${prefix}-${timestamp}.csv`;\n  }\n\n  static generateSyncReport(imported: number, updated: number, errors: string[]): string {\n    const timestamp = new Date().toISOString();\n    let report = `# SharePoint Sync Report\\n`;\n    report += `# Generated: ${timestamp}\\n`;\n    report += `# Imported: ${imported} records\\n`;\n    report += `# Updated: ${updated} records\\n`;\n    report += `# Errors: ${errors.length}\\n\\n`;\n    \n    if (errors.length > 0) {\n      report += `## Errors:\\n`;\n      errors.forEach((error, index) => {\n        report += `${index + 1}. ${error}\\n`;\n      });\n      report += '\\n';\n    }\n    \n    report += `## Summary:\\n`;\n    report += `Total records processed: ${imported + updated}\\n`;\n    report += `Success rate: ${((imported + updated) / (imported + updated + errors.length) * 100).toFixed(1)}%\\n`;\n    \n    return report;\n  }\n}","size_bytes":3500},"server/services/sharepointService.ts":{"content":"import { DataSyncSettings, InsertPantry } from \"@shared/schema\";\n\ninterface SharePointAuthToken {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n  scope: string;\n}\n\ninterface SharePointSite {\n  id: string;\n  name: string;\n  webUrl: string;\n}\n\ninterface SharePointList {\n  id: string;\n  name: string;\n  displayName: string;\n  description?: string;\n}\n\ninterface SharePointListItem {\n  id: string;\n  fields: Record<string, any>;\n}\n\nexport class SharePointService {\n  private static async getAccessToken(settings: DataSyncSettings): Promise<string> {\n    const { tenantId, clientId, clientSecret } = settings;\n    \n    if (!tenantId || !clientId || !clientSecret) {\n      throw new Error('Missing SharePoint authentication credentials');\n    }\n\n    const tokenEndpoint = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`;\n    \n    const params = new URLSearchParams({\n      client_id: clientId,\n      client_secret: clientSecret,\n      scope: 'https://graph.microsoft.com/.default',\n      grant_type: 'client_credentials'\n    });\n\n    const response = await fetch(tokenEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: params.toString()\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Authentication failed: ${response.status} ${errorText}`);\n    }\n\n    const tokenData: SharePointAuthToken = await response.json();\n    return tokenData.access_token;\n  }\n\n  static async testConnection(settings: DataSyncSettings): Promise<boolean> {\n    try {\n      const accessToken = await this.getAccessToken(settings);\n      \n      // Test by making a simple Graph API call\n      const response = await fetch('https://graph.microsoft.com/v1.0/sites', {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('SharePoint connection test failed:', error);\n      return false;\n    }\n  }\n\n  static async getSites(settings: DataSyncSettings): Promise<SharePointSite[]> {\n    console.log('===== STARTING getSites FUNCTION =====');\n    console.log('Settings received:', JSON.stringify(settings, null, 2));\n    const accessToken = await this.getAccessToken(settings);\n    console.log('Got access token, proceeding with site search...');\n    \n    // Try to search specifically for Second Harvest first\n    const searchResponse = await fetch('https://graph.microsoft.com/v1.0/sites?search=SecondHarvest', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    let specificSites = [];\n    if (searchResponse.ok) {\n      const searchData = await searchResponse.json();\n      specificSites = searchData.value || [];\n      console.log('Found sites matching \"SecondHarvest\":', specificSites.map((s: any) => ({\n        name: s.name,\n        displayName: s.displayName,\n        webUrl: s.webUrl\n      })));\n    }\n\n    // Try to get the specific SecondHarvestFoodBank site directly\n    const directSiteResponse = await fetch('https://graph.microsoft.com/v1.0/sites/caclv.sharepoint.com:/sites/SecondHarvestFoodBank', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    let directSite = null;\n    if (directSiteResponse.ok) {\n      directSite = await directSiteResponse.json();\n      console.log('Found SecondHarvestFoodBank site directly:', {\n        name: directSite.name,\n        displayName: directSite.displayName,\n        id: directSite.id,\n        webUrl: directSite.webUrl\n      });\n    } else {\n      console.log('Could not access SecondHarvestFoodBank site directly:', directSiteResponse.status, directSiteResponse.statusText);\n    }\n\n    // Get all sites\n    const response = await fetch('https://graph.microsoft.com/v1.0/sites?search=*', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch sites: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    let sites = data.value || [];\n    \n    // Add the direct site to the beginning of the list if we found it\n    if (directSite) {\n      sites = [directSite, ...sites.filter(s => s.id !== directSite.id)];\n    } else {\n      console.log('DirectSite was null, adding manual site');\n      // Manually add SecondHarvestFoodBank site even if we can't access it via API\n      const manualSite = {\n        id: 'manual-secondharvestfoodbank',\n        name: 'SecondHarvestFoodBank',\n        displayName: 'Second Harvest Food Bank',\n        webUrl: 'https://caclv.sharepoint.com/sites/SecondHarvestFoodBank',\n        createdDateTime: new Date().toISOString()\n      };\n      sites = [manualSite, ...sites];\n      console.log('Added SecondHarvestFoodBank site manually to the list');\n      console.log('Manual site details:', manualSite);\n    }\n    \n    console.log(`Total sites found: ${sites.length}`);\n    console.log('Sample of site names:', sites.slice(0, 10).map((s: any) => s.name || s.displayName));\n    console.log('First site in list:', sites[0] ? { name: sites[0].name, displayName: sites[0].displayName } : 'No sites');\n    \n    // Helper function to check if a name looks like a cryptic ID\n    const looksLikeCrypticId = (name: string) => {\n      return /^[a-zA-Z0-9_-]{15,}$/.test(name) ||\n             /^[a-zA-Z0-9]{10,}/.test(name) ||\n             /^[a-z0-9]{3,5}[A-Z0-9]{2,}/.test(name) ||\n             /\\.[a-zA-Z0-9]{10,}/.test(name) ||\n             /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.test(name) ||\n             /^CSP_/.test(name);\n    };\n\n    // Helper function to fetch detailed site info\n    const fetchSiteDetails = async (siteId: string, siteName: string) => {\n      try {\n        const siteResponse = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}`, {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        if (siteResponse.ok) {\n          const details = await siteResponse.json();\n          console.log(`Site ${siteName} (${siteId}) resolved to:`, {\n            displayName: details.displayName,\n            name: details.name,\n            title: details.title,\n            webUrl: details.webUrl\n          });\n          return details;\n        } else {\n          console.log(`Failed to fetch details for site ${siteName} (${siteId}):`, siteResponse.status);\n        }\n      } catch (error) {\n        console.log(`Error fetching details for site ${siteName} (${siteId}):`, error);\n      }\n      return null;\n    };\n    \n    // Process sites to get better names\n    const processedSites = await Promise.all(\n      sites.map(async (site: any) => {\n        let displayName = site.displayName || site.name || site.title || '';\n        const originalName = site.name || '';\n        \n        // If the name looks like a cryptic ID, try to get the real site details\n        if (looksLikeCrypticId(originalName)) {\n          console.log(`Attempting to resolve cryptic site name: ${originalName}`);\n          const siteDetails = await fetchSiteDetails(site.id, originalName);\n          if (siteDetails) {\n            displayName = siteDetails.displayName || siteDetails.name || siteDetails.title || '';\n            console.log(`Resolved ${originalName} to: ${displayName}`);\n          } else {\n            console.log(`Could not resolve ${originalName}`);\n          }\n        }\n        \n        // If we still don't have a good name, try to extract from webUrl\n        if (!displayName || displayName.length < 3) {\n          const urlParts = site.webUrl?.split('/');\n          if (urlParts && urlParts.length > 0) {\n            const lastPart = urlParts[urlParts.length - 1];\n            if (lastPart && lastPart.length > 3 && !lastPart.includes('.')) {\n              displayName = lastPart.replace(/-/g, ' ').replace(/_/g, ' ');\n              displayName = displayName.split(' ').map((word: string) => \n                word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n              ).join(' ');\n            }\n          }\n        }\n        \n        return {\n          ...site,\n          name: displayName,\n          originalName: originalName\n        };\n      })\n    );\n    \n    // Filter out system sites and invalid entries\n    const filteredSites = processedSites\n      .filter((site: any) => {\n        const name = site.name?.toLowerCase() || '';\n        const webUrl = site.webUrl?.toLowerCase() || '';\n        \n        // Filter out common system sites\n        const systemSiteKeywords = [\n          'search center',\n          'mysite',\n          'personal',\n          'profiles',\n          'compliancepolicycenter',\n          'contenttypehub',\n          'apps',\n          'appcatalog',\n          'portals',\n          'sites/appcatalog',\n          'sites/contentcenter',\n          'sites/compliancepolicycenter',\n          '/personal/',\n          'onedrive',\n          'my site',\n          'user information list',\n          'style library',\n          'master page gallery',\n          'site collection images',\n          'site assets',\n          'form templates',\n          'site pages',\n          'workflow history',\n          'workflow tasks',\n          'developer site',\n          'project web app',\n          'business intelligence',\n          'powerbi',\n          'reporting',\n          'admin',\n          'system',\n          'hidden',\n          'cache',\n          '_catalogs',\n          'search'\n        ];\n        \n        const hasSystemKeywords = systemSiteKeywords.some(keyword => \n          name.includes(keyword) || webUrl.includes(keyword)\n        );\n        \n        // For debugging: show all sites temporarily, just filter out obvious system keywords\n        return !hasSystemKeywords && \n               name.length > 0 && \n               name.length < 200; // Increased limit and removed cryptic ID filter for debugging\n      })\n      .sort((a: any, b: any) => {\n        const nameA = a.name?.toLowerCase() || '';\n        const nameB = b.name?.toLowerCase() || '';\n        return nameA.localeCompare(nameB);\n      });\n    \n    return filteredSites;\n  }\n\n  static async getLists(settings: DataSyncSettings): Promise<SharePointList[]> {\n    const { siteId } = settings;\n    \n    if (!siteId) {\n      throw new Error('Site ID is required to fetch lists');\n    }\n\n    const accessToken = await this.getAccessToken(settings);\n    \n    const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}/lists`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch lists: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.value || [];\n  }\n\n  static async getListColumns(settings: DataSyncSettings): Promise<any[]> {\n    const { siteId, listId } = settings;\n    \n    if (!siteId || !listId) {\n      throw new Error('Site ID and List ID are required to fetch columns');\n    }\n\n    const accessToken = await this.getAccessToken(settings);\n    \n    const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}/lists/${listId}/columns`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch list columns: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.value || [];\n  }\n\n  static async syncListData(settings: DataSyncSettings): Promise<InsertPantry[]> {\n    const { siteId, listId, columnMapping } = settings;\n    \n    if (!siteId || !listId) {\n      throw new Error('Site ID and List ID are required for data sync');\n    }\n\n    const accessToken = await this.getAccessToken(settings);\n    \n    // Fetch all list items with their field values\n    const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}/lists/${listId}/items?expand=fields`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch list data: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    const items: SharePointListItem[] = data.value || [];\n\n    // Transform SharePoint list items to pantry data\n    const pantries: InsertPantry[] = items.map(item => {\n      const fields = item.fields;\n      const mapping = columnMapping as Record<string, string> || {};\n\n      // Helper function to get mapped field value\n      const getFieldValue = (pantryField: string): any => {\n        const sharepointField = mapping[pantryField];\n        if (!sharepointField) return null;\n        \n        const value = fields[sharepointField];\n        if (value === null || value === undefined || value === '') return null;\n        \n        // Handle different field types\n        if (typeof value === 'string') {\n          return value.trim();\n        }\n        \n        return value;\n      };\n\n      // Helper to safely convert to string\n      const toStringOrEmpty = (value: any): string => {\n        if (value === null || value === undefined || value === '') return '';\n        return String(value);\n      };\n\n      const toStringOrNull = (value: any): string | null => {\n        if (value === null || value === undefined || value === '') return null;\n        // Handle objects that might contain URL information\n        if (typeof value === 'object' && value !== null) {\n          // Common SharePoint URL field patterns\n          if (value.Url) return String(value.Url);\n          if (value.url) return String(value.url);\n          if (value.URL) return String(value.URL);\n          if (value.Description) return String(value.Description);\n          if (value.description) return String(value.description);\n          // If it's an object but doesn't have expected properties, convert to JSON string\n          return JSON.stringify(value);\n        }\n        return String(value);\n      };\n\n      // Map SharePoint fields to pantry schema\n      const pantry: InsertPantry = {\n        name: getFieldValue('name') || 'Unknown Pantry',\n        address: getFieldValue('address') || '',\n        city: getFieldValue('city') || '',\n        state: getFieldValue('state') || '',\n        zipCode: toStringOrEmpty(getFieldValue('zipCode')),\n        phone: toStringOrNull(getFieldValue('phone')),\n        email: getFieldValue('email'),\n        website: toStringOrNull(getFieldValue('website')),\n        hours: getFieldValue('hours'),\n        description: getFieldValue('description'),\n        services: getFieldValue('services') ? [getFieldValue('services')] : [],\n        accessType: getFieldValue('accessType'),\n        latitude: toStringOrNull(getFieldValue('latitude')),\n        longitude: toStringOrNull(getFieldValue('longitude')),\n        isActive: true\n      };\n\n      // Debug logging for the first few pantries\n      if (items.indexOf(item) < 3) {\n        console.log(`Pantry ${pantry.name} - zipCode type:`, typeof pantry.zipCode, 'value:', pantry.zipCode);\n      }\n\n      return pantry;\n    });\n\n    return pantries.filter(pantry => pantry.name && pantry.name !== 'Unknown Pantry');\n  }\n\n  static async validateMapping(settings: DataSyncSettings): Promise<{ valid: boolean; errors: string[] }> {\n    const errors: string[] = [];\n    \n    try {\n      const columns = await this.getListColumns(settings);\n      const mapping = settings.columnMapping as Record<string, string> || {};\n      \n      const requiredFields = ['name', 'address', 'city', 'state', 'zipCode'];\n      const availableColumns = columns.map(col => col.name);\n      \n      for (const field of requiredFields) {\n        const mappedColumn = mapping[field];\n        if (!mappedColumn) {\n          errors.push(`Required field '${field}' is not mapped`);\n        } else if (!availableColumns.includes(mappedColumn)) {\n          errors.push(`Mapped column '${mappedColumn}' for field '${field}' does not exist in the SharePoint list`);\n        }\n      }\n    } catch (error) {\n      errors.push(`Failed to validate mapping: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n    \n    return { valid: errors.length === 0, errors };\n  }\n}","size_bytes":16606},"client/src/pages/access-denied.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { AlertCircle, Shield } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function AccessDenied() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const requestAdminMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('POST', '/api/auth/request-admin');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      toast({\n        title: \"Admin Access Requested\",\n        description: \"Your request has been submitted. You'll be notified when it's approved.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to request admin access. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"max-w-md w-full\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-3 bg-destructive/10 rounded-full\">\n              <Shield className=\"h-6 w-6 text-destructive\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-xl\">Access Restricted</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4 text-center\">\n          {user?.status === 'pending' ? (\n            <>\n              <div className=\"flex items-center justify-center space-x-2 text-amber-600\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <span className=\"text-sm\">Your account is pending approval</span>\n              </div>\n              <p className=\"text-muted-foreground text-sm\">\n                Your admin request is being reviewed. You'll receive access once approved by a super administrator.\n              </p>\n            </>\n          ) : user?.status === 'rejected' ? (\n            <>\n              <div className=\"flex items-center justify-center space-x-2 text-destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <span className=\"text-sm\">Access denied</span>\n              </div>\n              <p className=\"text-muted-foreground text-sm\">\n                Your admin request has been denied. Please contact a super administrator if you believe this is an error.\n              </p>\n            </>\n          ) : user?.role === 'user' ? (\n            <>\n              <p className=\"text-muted-foreground text-sm\">\n                You need administrator privileges to access this area.\n              </p>\n              <Button \n                onClick={() => requestAdminMutation.mutate()}\n                disabled={requestAdminMutation.isPending}\n                data-testid=\"button-request-admin\"\n                className=\"w-full\"\n              >\n                {requestAdminMutation.isPending ? 'Requesting...' : 'Request Admin Access'}\n              </Button>\n            </>\n          ) : (\n            <p className=\"text-muted-foreground text-sm\">\n              You don't have the required permissions to access this area.\n            </p>\n          )}\n          \n          <div className=\"pt-4 border-t\">\n            <Button \n              variant=\"outline\" \n              onClick={() => window.location.href = '/'}\n              data-testid=\"button-back-home\"\n              className=\"w-full\"\n            >\n              Back to Home\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3793}},"version":1}